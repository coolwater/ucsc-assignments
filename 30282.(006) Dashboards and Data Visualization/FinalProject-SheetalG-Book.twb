<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10300.17.0615.2100                               -->
<workbook original-version='10.3' source-build='10.3.1 (10300.17.0615.2100)' source-platform='win' version='10.3' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Olympics (Summer Olympics 2012 Data)' inline='true' name='federated.1lo2ppf0brsfqp0zkrckt0iuzxog' version='10.3'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Summer Olympics 2012 Data' name='excel-direct.1jfrkya02xa4v41f8421y1tt1m4x'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/esheega/Documents/UCSC/Visualization/project/Summer Olympics 2012 Data.xls' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1jfrkya02xa4v41f8421y1tt1m4x' name='Olympics-Tableau' table='[&apos;Olympics-Tableau$&apos;]' type='table'>
          <columns gridOrigin='A1:H1480:no:A1:H1480:0' header='yes' outcome='6'>
            <column datatype='string' name='Country' ordinal='0' />
            <column datatype='string' name='Event' ordinal='1' />
            <column datatype='string' name='Name' ordinal='2' />
            <column datatype='string' name='Sex' ordinal='3' />
            <column datatype='string' name='Sport' ordinal='4' />
            <column datatype='integer' name='Age' ordinal='5' />
            <column datatype='string' name='Medal Type' ordinal='6' />
            <column datatype='integer' name='Medal Count' ordinal='7' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Event</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Event]</local-name>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias>Event</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Name]</local-name>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias>Name</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sex</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sex]</local-name>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias>Sex</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sport</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sport]</local-name>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias>Sport</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Age</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Age]</local-name>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias>Age</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Medal Type</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Medal Type]</local-name>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias>Medal Type</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Medal Count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Medal Count]</local-name>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias>Medal Count</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Olympics-Tableau]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:H1480:no:A1:H1480:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Medal Count]' role='measure' type='quantitative' />
      <column datatype='string' name='[Medal Type]' role='dimension' type='nominal' />
      <column datatype='string' name='[Name]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='string' name='[Sex]' role='dimension' type='nominal' />
      <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Name]' derivation='None' name='[none:Name:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sport]' derivation='None' name='[none:Sport:nk]' pivot='key' type='nominal' />
      <column-instance column='[Medal Count]' derivation='Sum' name='[sum:Medal Count:ok]' pivot='key' type='ordinal' />
      <group caption='Action (Country,Medal Type,Sport)' hidden='true' name='[Action (Country,Medal Type,Sport)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Country]' />
          <groupfilter function='level-members' level='[Medal Type]' />
          <groupfilter function='level-members' level='[Sport]' />
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.509434' measure-ordering='alphabetic' measure-percentage='0.490566' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:Sex:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;F&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;M&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Name:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Alexander Mikhaylin&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Aliya Mustafina&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Anne Schellekens&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bubmin Kim&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Chris Hoy&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Daniel Gyurta&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dorian Mortelette&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Filip Adamski&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Hee Sook Jeon&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Ivan Nifontov&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Jessica Fox&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Juliette Haigh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kerstin Thiele&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Lauren Perdue&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mansur Isaev&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Matthew Mclean&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mireia Belmonte Garcia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nikolay Kovalev&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Priscilla Gneto&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Rebecca Soni&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Romano Battisti&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Siling Yi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Troy Dumais&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Xueying Li&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zhiwu Lu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Aida Shanaeva&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Andreas Toelzer&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bradley Wiggins&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chad le Clos&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Coralie Balmy&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Diana Maria Chelaru&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Etienne Stott&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gregory Mallet&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Inge Dekker&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;James Thompson&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jin Hyek Oh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Jonelle Richards&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Karsten Forsterling&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Kristof Wilke&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Lucie Decosse&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Martin Sinkovic&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Michal Martikan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Nathan Cohen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Peter Hochschorner&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Richard Hounslow&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ryan Lochte&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Sarah Menezes&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Teddy Riner&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vladimir Morozov&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Yun Hao&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Alejandra Orozco Loza&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Andrija Zlatic&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brian Price&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Camille Muffat&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Charlotte Bonnet&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dae-Nam Song&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Dirk Schrade&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Fabien Gilot&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Hamish Bond&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Iryna Kulesha&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jason Lezak&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Joseph Sullivan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Katherine Grainger&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kylie Palmer&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mahe Drysdale&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Masashi Ebinuma&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Miklos Ungvari&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nathan Adrian&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nick Thoman&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Phelan Hill&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rob Gibson&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Shannon Vreeland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tim Grohmann&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Xiaojun Lu&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Yuting Fang&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Alina Dumitru&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Arsen Galstyan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Brittany Elmslie&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Carina BAER&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Christopher Froome&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Danila Izotov&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Elizabeth Beisel&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Gemma Gibbons&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hiroaki Hiraoka&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jacobine Veenhoven&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Jing Xu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kai Qin&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Koji Yamamuro&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Leuris Pupo&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Margaux Farrell&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Maximilian Reinelt&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mylene Lazare&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ole Bischof&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rajmond Debevec&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Ruben Limardo Gascon&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Satomi Suzuki&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Svetlana Podobedova&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Un Guk Kim&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yibing Chen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Alexandr Vinokurov&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Amaury Leveaux&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Annekatrin Thiele&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Byungchul Choi&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Christian Sprenger&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Daniel Noonan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Douglas Csima&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Florian Mennigen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Helen Glover&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Iztok Cop&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jessica Hardy&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Jun Dai&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kevin Sireau&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Lauren Wilkinson&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Marc Ryan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mauro Nespoli&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Miriam Welte&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ning Ding&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Qingfeng Lin&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ricky Berens&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rosalba Forciniti&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sizwe Ndlovu&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Tuvshinbayar Naidan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Yana Dementieva&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zi He&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Alessio Sartori&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angie Bainbridge&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Britta Heidemann&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Chen Xu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Damir Martin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Dmitry Ushakov&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Felipe Kitadai&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Hannes Aigner&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Iuliia Efimova&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jennifer Abel&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Judith Arndt&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kayla Harrison&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Larisa Andreea Iordache&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Maialen Chourraut&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Masashi Nishiyama&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ming Cheng&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Missy Franklin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nicola Wilson&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Olena Kostevych&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Philip Hindes&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Rob Williams&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sheng Lei&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Tom Ransley&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Xiaoxia Li&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Yutong Luo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Adrienne Martelli&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Andreanne Morin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bartosz Piasecki&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cate Campbell&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Conor Dwyer&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Davis Tarwater&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Eskild Ebbesen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Gabrielle Douglas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Greg Searle&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ilias Iliadis&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;James Magnussen&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;John Smith&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Karina Bryant&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kristina Cook&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Louis Smith&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Marti Malloy&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Michael D&apos;almeida&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Nataliya Dovgodko&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pavol Hochschorner&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Richard Chambers&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Sandra Raluca Izbasa&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Takeshi Matsuda&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Vijay Kumar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Yuliya Kalina&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alaaeldin Abouelkassem&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Alicia Coutts&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Andrew Byrnes&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Brady Ellison&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chantal Achterberg&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Corina Caprioriu&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Diego Occhiuzzi&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Eva Csernoviczki&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ha Na Oh&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ingrid Klimke&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jangmi Kim&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Jong Sim Rim&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kasper Winther&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Kseniia Afanaseva&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Luka Spik&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mary King&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Matthew Grevers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Michele Frangilli&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Natsumi Hoshi&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Peter Robert Russell Wilson&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Richard Schmidt&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sarah Tait&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Thiago Pereira&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Will Crothers&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Yunqi Li&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Anastasiia Kozhenkova&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Automne Pavia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Caryn Davies&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Claudia Belderbos&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;David Florence&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Elisa Di Francisca&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Eric Murray&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gevrise Emane&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Idalys Ortiz&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;James Feigen&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Jiyeon Kim&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kaori Matsumoto&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Kristian Thomas&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lionel Cox&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mark Todd&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Megan Kalmoe&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Natalie Dell&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oscar Albeiro Figueroa Mosquera&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ren Hayakawa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ryohei Kato&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tagir Khaibulaev&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Vasily Mosin&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Victoria Komova&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yuan Cao&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Alex Partridge&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anna Meares&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Britta Oppelt&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Chenglong Zhang&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dan Yu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Dong Dong&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Femke Heemskerk&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Haojie Lu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ivan Cambar Rodriguez&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jeremiah Brown&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Julia Michalska&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kazuhito Tanaka&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Lasha Shavdatuashvili&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Maiya Maneza&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Matthew Brittain&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mingjuan Wang&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nienke Kingma&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Olga Zabelinskaya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Phillipp Wende&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Robert Forstemann&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Shu-Ching Hsu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Tony Estanguet&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Xiaoxiang Dai&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Yang Sun&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Zara Phillips&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Alyssa Anderson&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ashley Brzozowicz&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bronte Barratt&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Carline Bouw&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Christopher Morgan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Danka Bartekova&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Emilie Fer&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;George Nash&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hiromi Miyake&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Jade Neilsen&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Jingbiao Wu&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kai Zou&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kosuke Hagino&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lia Neal&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Maria Paseka&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mayra Aguiar&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Nan Zhang&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Olga Kharlan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Razvan Constantin Martin&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ruolin Chen&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Shiwen Ye&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Svetlana Tsarukaeva&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Urska Zolnir&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Ying Chen&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Amanda Weir&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Asley Gonzalez&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Caroline Lind&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chun Hwa Ryang&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Clement Lefert&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Darcy Marquardt&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Emilie Heymans&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Germain Chardin&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hyeonju Choi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jae-Bum Kim&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Jinjie Gong&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Kamilla Gafurzianova&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Krista Guloien&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Libby Trickett&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mariana Avitia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mc Kayla Maroney&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Nasser Al-Attiya&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ondrej Synek&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Rebecca Adlington&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ruta Meilutyte&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sylwia Bogacka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Taehwan Park&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Valent Sinkovic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Ying Lu&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Abigail Johnston&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Anders Golding&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Aya Terakawa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Catalina Ponor&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Conlin Mccabe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;David Sain&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Emily Seebohm&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Erin Cafaro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gil Ok Jung&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ilaria Salvatori&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;James Foad&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Joachim Fischer&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kara Kohler&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Kristin Armstrong&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Liuyang Jiao&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Marleen Veldhuis&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Meghan Musnicki&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Natalie Mastracci&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Paola Espinosa Sanchez&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Rene Enders&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sam Oldham&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Takaharu Furukawa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Vavrinec Hradilek&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Yujie Sun&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Aida Roman&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Andreas Kuffner&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Blair Evans&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Celine Goberville&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Constantine Louloudis&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Diana Laura Bulimar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Esther Lofgren&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Gregory Bauge&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Hao Wang&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ilya Zakharov&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;James Mcrae&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Jonathan Paget&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Karl Schulze&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Kristina Vogel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Luca Tesconi&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Martin Sauer&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Michael Jamieson&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Natalya Zabolotnaya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Peter Chambers&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Richard Egington&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sara Algotsson Ostholt&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Taylor Ritzel&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Vincent Hancock&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Yun Chol Om&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Aliaksandra Herasimenia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Annemiek de Haan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Arianna Errigo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Caitlin Leverenz&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Christine Girard&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Daniel Purvis&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Edith Bosch&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gabriel Bergen&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Henk Grol&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jacob Barsoe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jike Zhang&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Jun-Ho Cho&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kim Crow&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Lauritz Schoof&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Marcel Nguyen&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Max Whitlock&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mohamed Sbihi&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ning Wei&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rachelle Viinberg&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Roseline Filion&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ryosuke Irie&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sofya Velikaya&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tyler Clary&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Yanet Bermoy Acosta&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zsuzsanna Francia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Alexander Kristoff&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Anna Watkins&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brooke Pratley&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Chris Bartley&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Danell Leyva&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Dong Hyun Im&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Feng Ding&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Heather Stanning&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ivan Garcia Navarro&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Jesse Sergent&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Julia Richter&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kelci Bryant&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Laszlo Cseh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malcolm Howard&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Matthew Langridge&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Minxia Wu&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Nikita Lobintsev&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Pimsiri Sirikaew&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ranomi Kromowidjojo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Roline Repelaer van Driel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sideris Tasiadis&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Tony Martin&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Xuanxu Li&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Yannick Agnel&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zhe Feng&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Alain Bernard&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Allison Schmitt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Andrew Nicholson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Brendan Hansen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Charlie Houchin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Cristina Iovu&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dimitri Peters&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Evgeny Kuznetsov&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Haiqi Jiang&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Inna Deriglazova&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Janine Hanson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Jongoh Jin&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kate Hornsey&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Kum Ae An&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Lukas Mueller&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mary Whipple&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Melanie Schlanger&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Mika Sugimoto&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Niccolo Campriani&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Peter Thomsen&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Rigoberto Uran Uran&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Sergei Fesikov&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Tianwei Feng&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;William Fox-Pitt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Yuri Alvear&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Anastasia Grishina&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Audrey Tcheumeo&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Caroline Powell&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Chunlong Lu&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Dana Vollmer&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;David Boudia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Eric Johannesen&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;German Sanchez Sanchez&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hyun Hee Nam&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jake Kaminski&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Jinsun Jung&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kaori Kawanaka&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Kristian Ipsen&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lili Xu&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Marianne Vos&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Meaghan Benfeito&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Natalie Coughlin&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ophelie-Cyrielle Etienne&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Rebecca Scown&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Ryo Tateishi&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sytske de Groot&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Valentin Hristov&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Valentina Vezzali&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Yolane Kukla&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Alin George Moldoveanu&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Antoine Valois-Fortier&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bo Bae Ki&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cameron van der Burgh&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Christinna Pedersen&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Daniele Molmenti&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Eleanor Logan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gagan Narang&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hinkelien Schreuder&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jacob Wukie&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Jin Ma&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kaarle Mcculloch&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kimberly Rhode&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Lesley Thompson-Willie&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Marco Galiazzo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Maximilian Levy&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Morten Jorgensen&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nyam-Ochir Sainjargal&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Rafael Silva&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Roxana Daniela Cocos&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sandra Auffarth&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Sung Jin Lee&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Ugo Legrand&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Yi Tang&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Zulfiya Chinshanlo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Alan Campbell&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andrey Grechin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brent Hayden&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Charline van Snick&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cullen Jones&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Dimitrij Ovtcharov&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Evgeny Lagunov&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Hakan Dahlby&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Irawan Eko Yuli&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jason Kenny&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jordyn Wieber&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kateryna Tarasenko&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kyla Ross&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Magdalena Fularczyk&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Maryna Shkermankova&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Michael Jung&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Michael Phelps&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Miki Kanie&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nicholas Mccrory&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peter Vanderkaay&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Riki Nakaya&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sergei Martynov&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tim Baillie&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;William Satch&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Yusuke Tanaka&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[sum:Medal Count:ok]' type='palette'>
            <map to='#499894'>
              <bucket>9</bucket>
            </map>
            <map to='#499894'>
              <bucket>10</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>79</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>0</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5</bucket>
            </map>
            <map to='#79706e'>
              <bucket>13</bucket>
            </map>
            <map to='#79706e'>
              <bucket>22</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>14</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>6</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>44</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>2</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>33</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>7</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>16</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>20</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>24</bucket>
            </map>
            <map to='#d37295'>
              <bucket>19</bucket>
            </map>
            <map to='#d37295'>
              <bucket>21</bucket>
            </map>
            <map to='#d37295'>
              <bucket>25</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>40</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>53</bucket>
            </map>
            <map to='#e15759'>
              <bucket>11</bucket>
            </map>
            <map to='#e15759'>
              <bucket>17</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>8</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>3</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>32</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>46</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>12</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>18</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>15</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>4</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Taipei (Chinese Taipei)&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Czech Republic&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Great Britain&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Republic of Korea&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Republic of Moldova&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Democratic People&apos;s Republic  of Korea&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;People&apos;s Republic of China&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;United States of America&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sport:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Equestrian&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Archery&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cycling - Road&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rowing&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Fencing&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Cycling - Road, Cycling - Track&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Badminton&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Trampoline&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cycling - Track&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Shooting&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Swimming&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Weightlifting&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Gymnastics - Artistic&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Diving&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Canoe Slalom&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Table Tennis&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Judo&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cycling - Mountain Bike, Cycling - Track&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='SportsWikipedia' name='[Action1]'>
      <source datasource='federated.1lo2ppf0brsfqp0zkrckt0iuzxog' type='datasource'>
        <exclude-sheet name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)' />
        <exclude-sheet name='Geo Map (Medal Count by Country)' />
      </source>
      <link caption='' expression='http://en.wikipedia.org/wiki/&lt;[Sport]&gt;' />
    </action>
    <action caption='Filter 1 (generated)' name='[Action2]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Dashboard  - Olympics by Sheetal' type='sheet' worksheet='Stacked Bar Chart (Medal Type and Count by Sport, with URL)' />
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='Dashboard  - Olympics by Sheetal' />
      </command>
    </action>
    <datasources>
      <datasource caption='Olympics (Summer Olympics 2012 Data)' name='federated.1lo2ppf0brsfqp0zkrckt0iuzxog' />
    </datasources>
    <datasource-dependencies datasource='federated.1lo2ppf0brsfqp0zkrckt0iuzxog'>
      <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
    </datasource-dependencies>
  </actions>
  <worksheets>
    <worksheet name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)'>
      <table>
        <view>
          <datasources>
            <datasource caption='Olympics (Summer Olympics 2012 Data)' name='federated.1lo2ppf0brsfqp0zkrckt0iuzxog' />
          </datasources>
          <datasource-dependencies datasource='federated.1lo2ppf0brsfqp0zkrckt0iuzxog'>
            <column datatype='integer' name='[Age]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Medal Count]' role='measure' type='quantitative' />
            <column datatype='string' name='[Medal Type]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='string' name='[Sex]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column-instance column='[Country]' derivation='Attribute' name='[attr:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Min' name='[min:Number of Records:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Age]' derivation='None' name='[none:Age:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal Type]' derivation='None' name='[none:Medal Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal Count]' derivation='Sum' name='[sum:Medal Count:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Action (Country,Medal Type,Sport)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Country]' />
              <groupfilter function='level-members' level='[Medal Type]' />
              <groupfilter function='level-members' level='[Sport]' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]' included-values='in-range'>
            <min>15</min>
            <max>56</max>
          </filter>
          <filter class='categorical' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]'>
            <groupfilter function='level-members' level='[none:Medal Type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sex:nk]'>
            <groupfilter function='level-members' level='[none:Sex:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]</column>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sex:nk]</column>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]</column>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Action (Country,Medal Type,Sport)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='display' class='0' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk]' scope='rows' value='false' />
            <format attr='display' class='1' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk]' scope='rows' value='false' />
            <format attr='tick-color' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' value='#ffffff' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='cell-w' value='1648' />
            <format attr='cell-h' value='1648' />
            <format attr='cell' value='206' />
            <format attr='cell-q' value='1030' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='background-color' value='#ffffff' />
          </style-rule>
        </style>
        <panes>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <wedge-size column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
              <text column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='vertical-align' value='center' />
                <format attr='wrap' value='on' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-mode' value='all' />
              </style-rule>
            </style>
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' />
              <size column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
              <wedge-size column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
              <text column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[attr:Country:nk]' />
              <text column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='vertical-align' value='center' />
                <format attr='wrap' value='on' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-mode' value='all' />
              </style-rule>
            </style>
          </pane>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <wedge-size column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
              <text column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
            </encodings>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='vertical-align' value='center' />
                <format attr='wrap' value='on' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='size' value='0.51574587821960449' />
                <format attr='mark-color' value='#ffffff' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk] + [federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk])</rows>
        <cols />
        <annotations>
          <annotation class='area' id='2' text-pinx='0.5' text-piny='0.5' text-width-delta='-18'>
            <formatted-text>
              <run bold='true'>Total Medals in Age Range by Gender</run>
            </formatted-text>
            <top-left>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.416262'>
                  <node-reference />
                </x-coord>
                <y-coord axis-value='0.95339805825242729'>
                  <node-reference>
                    <axis>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </top-left>
            <bottom-right>
              <visual-coordinate class='axis'>
                <x-coord cell-offset='0.587985'>
                  <node-reference />
                </x-coord>
                <y-coord axis-value='0.79029126213592238'>
                  <node-reference>
                    <axis>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[min:Number of Records:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </bottom-right>
            <text x='0.5' y='0.5' />
          </annotation>
        </annotations>
      </table>
    </worksheet>
    <worksheet name='Geo Map (Medal Count by Country)'>
      <table>
        <view>
          <datasources>
            <datasource caption='Olympics (Summer Olympics 2012 Data)' name='federated.1lo2ppf0brsfqp0zkrckt0iuzxog' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1lo2ppf0brsfqp0zkrckt0iuzxog'>
            <column datatype='integer' name='[Age]' role='measure' type='quantitative' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Medal Count]' role='measure' type='quantitative' />
            <column datatype='string' name='[Medal Type]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column-instance column='[Age]' derivation='None' name='[none:Age:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal Type]' derivation='None' name='[none:Medal Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal Count]' derivation='Sum' name='[sum:Medal Count:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Medal Count]' derivation='Sum' name='[sum:Medal Count:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Action (Country,Medal Type,Sport)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Country]' />
              <groupfilter function='level-members' level='[Medal Type]' />
              <groupfilter function='level-members' level='[Sport]' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]' included-values='in-range'>
            <min>15</min>
            <max>56</max>
          </filter>
          <filter class='categorical' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]'>
            <groupfilter function='level-members' level='[none:Medal Type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]</column>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]</column>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Action (Country,Medal Type,Sport)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='font-weight' data-class='subtotal' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' value='bold' />
            <format attr='color' data-class='subtotal' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' value='#000000' />
            <format attr='font-size' data-class='subtotal' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' value='10' />
            <format attr='background-color' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:ok]' value='#ffffff' />
            <format attr='background-color' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' value='#ffffff' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
              <lod column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' />
              <color column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:ok]' />
              <geometry column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Geometry (generated)]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Latitude (generated)]</rows>
        <cols>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Stacked Bar Chart (Medal Type and Count by Sport, with URL)'>
      <table>
        <view>
          <datasources>
            <datasource caption='Olympics (Summer Olympics 2012 Data)' name='federated.1lo2ppf0brsfqp0zkrckt0iuzxog' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1lo2ppf0brsfqp0zkrckt0iuzxog'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Medal Count]' role='measure' type='quantitative' />
            <column datatype='string' name='[Medal Type]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal Type]' derivation='None' name='[none:Medal Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sport]' derivation='None' name='[none:Sport:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal Count]' derivation='Sum' name='[sum:Medal Count:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]'>
            <groupfilter function='level-members' level='[none:Medal Type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='label'>
            <format attr='text-orientation' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sport:nk]' value='-90' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='fill-above' id='refline0' value='#00000000' />
            <format attr='fill-below' id='refline0' value='#00000000' />
            <format attr='line-visibility' id='refline0' value='off' />
            <format attr='text-align' id='refline0' value='center' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' />
            </encodings>
            <reference-line axis-column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' enable-instant-analytics='true' formula='sum' id='refline0' label-type='value' scope='per-cell' value-column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' z-order='1' />
          </pane>
        </panes>
        <rows>([federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk] * [federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk])</rows>
        <cols>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sport:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Tree Map (Country Medal Count by Sport, with URL)'>
      <table>
        <view>
          <datasources>
            <datasource caption='Olympics (Summer Olympics 2012 Data)' name='federated.1lo2ppf0brsfqp0zkrckt0iuzxog' />
          </datasources>
          <datasource-dependencies datasource='federated.1lo2ppf0brsfqp0zkrckt0iuzxog'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='integer' name='[Medal Count]' role='measure' type='quantitative' />
            <column datatype='string' name='[Medal Type]' role='dimension' type='nominal' />
            <column datatype='string' name='[Sport]' role='dimension' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal Type]' derivation='None' name='[none:Medal Type:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sport]' derivation='None' name='[none:Sport:nk]' pivot='key' type='nominal' />
            <column-instance column='[Medal Count]' derivation='Sum' name='[sum:Medal Count:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Action (Country,Medal Type,Sport)]'>
            <groupfilter function='crossjoin' user:ui-enumeration='all' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[Country]' />
              <groupfilter function='level-members' level='[Medal Type]' />
              <groupfilter function='level-members' level='[Sport]' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]'>
            <groupfilter function='level-members' level='[none:Medal Type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]</column>
            <column>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[Action (Country,Medal Type,Sport)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
              <color column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sport:nk]' />
              <text column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' />
              <text column='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard  - Olympics by Sheetal'>
      <style />
      <size sizing-mode='automatic' />
      <datasources>
        <datasource caption='Olympics (Summer Olympics 2012 Data)' name='federated.1lo2ppf0brsfqp0zkrckt0iuzxog' />
      </datasources>
      <datasource-dependencies datasource='federated.1lo2ppf0brsfqp0zkrckt0iuzxog'>
        <column datatype='integer' name='[Age]' role='measure' type='quantitative' />
        <column datatype='string' name='[Medal Type]' role='dimension' type='nominal' />
        <column datatype='string' name='[Sex]' role='dimension' type='nominal' />
        <column-instance column='[Age]' derivation='None' name='[none:Age:qk]' pivot='key' type='quantitative' />
        <column-instance column='[Medal Type]' derivation='None' name='[none:Medal Type:nk]' pivot='key' type='nominal' />
        <column-instance column='[Sex]' derivation='None' name='[none:Sex:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='100000' id='5' param='horz' type='layout-flow' w='100000' x='0' y='0'>
            <zone h='100000' id='3' type='layout-basic' w='92727' x='0' y='0'>
              <zone h='50000' id='1' name='Stacked Bar Chart (Medal Type and Count by Sport, with URL)' w='46364' x='0' y='0' />
              <zone h='50000' id='8' name='Geo Map (Medal Count by Country)' w='46363' x='46364' y='0' />
              <zone h='50000' id='11' name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)' w='46364' x='0' y='50000' />
              <zone h='50000' id='15' name='Tree Map (Country Medal Count by Sport, with URL)' w='46363' x='46364' y='50000' />
            </zone>
            <zone fixed-size='160' h='100000' id='4' is-fixed='true' param='vert' type='layout-flow' w='7273' x='92727' y='0'>
              <zone h='12992' id='6' name='Stacked Bar Chart (Medal Type and Count by Sport, with URL)' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]' type='filter' w='7273' x='92727' y='0' />
              <zone h='19373' id='7' name='Stacked Bar Chart (Medal Type and Count by Sport, with URL)' pane-specification-id='0' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' type='color' w='7273' x='92727' y='12992' />
              <zone h='6581' id='9' name='Geo Map (Medal Count by Country)' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]' show-domain='false' show-null-ctrls='false' type='filter' w='7273' x='92727' y='32365' />
              <zone h='19373' id='10' name='Geo Map (Medal Count by Country)' pane-specification-id='0' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:ok]' type='color' w='7273' x='92727' y='38946' />
              <zone h='10342' id='12' name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sex:nk]' type='filter' w='7273' x='92727' y='58319' />
              <zone h='6581' id='13' name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]' show-domain='false' show-null-ctrls='false' type='filter' w='7273' x='92727' y='68661' />
              <zone h='5043' id='14' name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)' pane-specification-id='6' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' type='size' w='7273' x='92727' y='75242' />
              <zone h='19715' id='16' name='Tree Map (Country Medal Count by Sport, with URL)' pane-specification-id='0' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sport:nk]' type='color' w='7273' x='92727' y='80285' />
            </zone>
          </zone>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='Stacked Bar Chart (Medal Type and Count by Sport, with URL)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sex:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sport:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[rank:sum:Medal Count:ok:2]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Geo Map (Medal Count by Country)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]' type='filter' />
            <card param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='0' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sex:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)'>
      <cards>
        <edge name='left'>
          <strip size='200'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]' type='filter' />
            <card param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sex:nk]' type='filter' />
            <card param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card pane-specification-id='6' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]' type='color' />
            <card pane-specification-id='6' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[attr:Country:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Age:qk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sex:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Tree Map (Country Medal Count by Sport, with URL)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sport:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Medal Type:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sex:nk]</field>
            <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sport:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='dashboard' maximized='true' name='Dashboard  - Olympics by Sheetal'>
      <viewpoints>
        <viewpoint name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)'>
          <zoom type='entire-view' />
          <highlight field='[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:qk]' type='size'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='Geo Map (Medal Count by Country)'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[sum:Medal Count:ok]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Stacked Bar Chart (Medal Type and Count by Sport, with URL)'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Country:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Tree Map (Country Medal Count by Sport, with URL)'>
          <highlight>
            <color-one-way>
              <field>[federated.1lo2ppf0brsfqp0zkrckt0iuzxog].[none:Sport:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard  - Olympics by Sheetal' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Donut Pie Chart (Medals by Country, Filtered Totals - Age Range, Sex, Type)' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nO29eXRc133n+Xnv1b7vKADEToALSGohqcXabdmx5CXpzMSx3Ul6Js6ZSdIz
      ZzrJP92nz/Q40+dMz+m0J31mOumZ7pyopbZsR7Yj2ZGsfRclcV9BkMRGFLbCUqh9eVX13p0/
      iqRIiRQKJIACwPc5h4dE4S23Hu/33d/vd3/3dyUhhMDA4DbFBGBowOB2xXT5H3Nzczgcjka2
      xcBgzbkiAIfDgdvtbmRbDAzWHLnRDTAwaCSGAAxuawwBGNzWGAIwuK0xBGBwWyGEuCbsbwjA
      YEOQGDnBuXiexOhJLszmqVYqCCHQdY1KpYpAoFWr6LqgWq1SLlfQdR2BQNd1dF2jWtXILoxw
      /Owk1WoFTdORRA1yuZwRBjVYtwhd5dXXDyDrKtu7mjg2nsBhcZKavoDPaSXSdxeDAxdwOB3s
      6o7wsxdeYf++e7j/8S/w1ktvo5czaJpgz747SOWsVDMTDE0mjBHAYGMgyRZkqQImE9OxSRTF
      hMViJtLayUP7+5kYGSJblbFYLGhqga//9u/hMAmEriP0CjMz8zicTirlMuV8itj0Aul0yhgB
      DDYOEyNnKVvCdEbsvPP+x0TauvHYFFoCdubKdi6ePoTZ14SamEI3O+jrbufs0Bi+YBS3UmRq
      Pssdd+xEVSWGz52gLDsMARjc3hgmkMFtjSEAg01Fan6Ktz84VPfxhgAMNhdmJ1K1UPfhhgAM
      NhU+n29ZxxsCMNhUjJw7xcTEBEMXp+s63ogCGdzWGCNAI6jmGByagFKKwbGZKx+r+TSpnMrg
      4OB1Tzt69CgAxw9+wOuvvUmhsMjgSPyaY2507qfJzV/kl69+gAYITeXlV9+knoWx+fQiebVS
      1z0aQS3XR0PoZfRKGq04TTU3RCV1lPLCe6hzr6POvoIaf4nxsZc/WRFmsIZUi4yOz7AjIhid
      muf0h29jdnl4+O6tTBUdvPyLX2Bz2Dl9/AQ2b5iuiJ3x2TSlSq2LDl4Y4dd/69tkJo7yi5fO
      E/jOEwwMDGD3BDn49iuUhYnk1BDpIvRvbWFoKsHd++4j6NB5+ZW3URweAtUpsloXEjAfO08u
      nWY6pXLy3X+gVFJxBCL4Q1vIzY5S0Ez0tXk5eiHBvv4tWNxh3j5xnO7t/RTnJ5hJlXnyiS+t
      6dtUCB30Mnp5Hq0QQ1fnEZVFdHUevZJCVFIgPl+o4ym3IYCGIEtIQqDpOooiEWntwm2rks/l
      0O1Rdu3eTUhKMZUV+CtzSLqXx7/4GO+++y4g+PVvfp3XX/gJ+x5+gN13eihnF9GFxPj4BL07
      d7NnWxf/6Z2XaQ75KSk70CvTZLM5LMlJmnc9SGH4ME1dPXi9dyADx06ex+OxcvLYSRzeEL1t
      YN96L8Mfv8/5sSmawx6m4zoPfPErED/B+MgQW+/6An1hEy+fH2B2cpYSsForyoUQoBXRijG0
      /AhaYRxdnUFX50FUb/q6JlkYAmgIlgAu+QivfDDHPY88Snx8CrtFw+6w4rGaydoVFgjQHZzG
      GWgi4pJ4+933sLv8gMbRI8ewuEN4Ai1oyVfJBLsRkkQoHCLigJPnx9izq59iVcZjk7BZzAgh
      8LTtYOG1tzC5gvhcfnJWBYRGtHMbd965m6NHj2GxBHHawWpSCDa3cYdZoizb2BL24LGbqbh8
      9IS6GDh2ENHZiQQEwmGUFXw8QgiElkfLDlLNXUDLj6KXpm6ps18PCcMJNlgnCL2MVpxEy5yh
      mh1AK8SWNGFulYGMyxgBDBqH0Mto+REqqaNU08cRlfSa3t8s6YYANiOTY+cZHp/BHYjSEXYw
      Mp1i/927kSWp0U1DCA29EKO8eIBq+kTNWW0QkmSYQJuWSn6B1z8cRCtl2Ls9ymjOz4N3dTek
      LTWbPkdl8SCVxQPoxYmGtOPTDOccxgiwOREceP9jHvzik5z58E0uTCbIayqwtgIQQkcrjFFZ
      eJdK6ijo6prefylMkhEF2pTo1SJFyYnHIhMMBhkevchdDz24ZvcXepVq5hTl+TfRchegrim2
      xmCYQAYrhtArVJKHKM+9gl6aWfqEBjNRsBkjgMGtc6Xjz76MrsaXPmGdIBsmkMGtIPQq1dRR
      1NkXN8Qb/3oYAjBYNkLoaPkRSlPPoRfGGt2cm8Zwgg2WhRACUZ6nNP1zqqljrGfnth4kyRgB
      DOpE6CrluddQZ19Zd+HMm0XGGAEMlkAIUTN3Jn6IXppsdHNWFMUwgQw+D1HNU5p5nkrifRBa
      o5uzKhgCMPgMtbf+EKXY0+jqbKObs2rIhg9g8GmEXkGNv0h57tUVz79fjxgCMLiCVpqhFHsG
      LT/U6KasGYYADBBCUM2cpDT+XxBartHNWTOMKJABQq+izr5IOf4rQG90c9YWwwe4vdErGUqx
      p6lmTja6KQ1BwhDAbYtWilMc+4+1xea3KZJhAt1+1EKcwxTH/l9EdW3X4K5HDAHcRgghqKYO
      U4w9vWnSGW4FwwS6jRBCUFl4l9Lkj7jtnN0bYCTD3SYIoVOeex11+ucYnf9aDAFscoTQUeO/
      pBx/iY2evrzSGPMAmxwhdNSZFyjP/qrRTVmfSEZ59E2LEAI1/g9G518CQwCbECEE5blXKMdf
      bHRT1jUyhgA2HUIIKon3UKefx7D5l8YQwCZCCEE1eYjSxLMY0Z6lkRCGADYTWn6Y4sQzGJ2/
      PiTDCd486Oo8xbG/NmZ4l4khgE2AXs1RGP2/EdVso5uyoTCc4E2AEBrFi/95w1ZmaySGCbQE
      k5OTn8RRhE6ptHbmRXI+Tl5dek2uOvMPaNmBNWjR5kT5/ve//32AcrmM1WptcHNWnkQ8xjN/
      +zSLZUFz2Ed8LoHH5WRycgqTIphfSON2O0ktzKFhZm5mGqfXi1ZY5OiZi8iFOT48egYknZOn
      BnG6XJhFiUS2gqbmSeeLOO1W4jMz2B1OMsl58qqG1QTxuUVcLifJuUl+8uwzTKUrtET8zM4v
      4nY7mJiYxqTAfCKJ2+UklZinikJidgavz827Hxxma3fHDb9bJX0CdfJHGOHOm2fTp0IEo+1s
      7+lh/0P3kY4Nc/rYx8z0PEIhOc6Rg1N0d7ZwcWyY+XQZWah4nDa2tLcTO3+SLdvu5+zRN/na
      174G1TwHPzrKyUKK7Xf3k1xQOTV4nqDdTCTqRdi8nB0eIT42xt4HHuH4wdP4vS7mclXu7N1C
      /44+Ou+6h1xygtOHPmJq56OUZoc5dniOnvYmRkdGWMxWkbUCIZ8df9OjiHIOQS1t99MUMjFK
      I/8Zk2REfG6F28oEOnn6LFvaW8ilagtBvP4wHVtaKaRmGZ+cAdl81dG1bmeVNJJ5lZKq0tbZ
      Q2vYR/lSjaj2rq00+TzMLcwzE5/DanVy//37OXHyBHPxaRYzRczytW/nU6cHaGuNkMnmAfD4
      Q3R0tJBbXGBiahpJMS35Pte1Miff+pecPH2IbC5X20fX4KbY9CYQgM3hwOPx4LTIpIqwtauT
      UMjHhYHjlCQ3Dz7yGE4K+MItdLa14HK5cHk9nD45wKMP38fJo4eRbB6ikRCBYAC3x4/b5cbv
      8xAM+undsYP0/Dzt3VvJLs4Sbetm756dJFIFenu3YrOYsNrsuN0ePHYTyaKgp7uTcMDL8NmT
      5PHw0KMP45SKuINROttbsVsEF6eS9F7HBBo6+tfMjPyKqqYxn0igmEy4nE6kdbAJ3kbjtt4h
      Jh6PE41Gb/j7qclJWrZsua4JstptSM7HsXhCOK3XWqnJ+HEOvvg9hH6tgxz0B9ja2YnJtOmt
      2hXlthbARqNSzvHh3/82hcz1d1m0Wa309fTgdrrWuGUbl9vKB1hppi5e4I13P1qz+50/+Jc3
      7PwAJVXlzLlzzMzOGn5BnRgCuAWC0XZMYm3mBhanjzB57u+XPE7XdUZj41wYHaFa3fy1PW8V
      QwC3gM1mW5P7aFWVgQP/BrGMEuULi4ucHDxLLp9fxZZtfAwB3ALnzxxndnaWscnVLSF+ZvxX
      pDPL34urVCpx+twgM3OGSXQjDCd4nTOTmeLpc3+FA5Wm8TO4kzM3FZUKBYL0dHTcZlEiCUlx
      Iln8yNYIsjWKpDiQFCuSbAfFuvlngjc0QnBm4HnODp8jEAxQ7NmLLztP9OJpLGphWZdaWEyQ
      L+Tp6+7B5XSuUoMbjGxFsbWiuLdhcm1HtkaQTG6QrTecIzFGgPVMchRx4mkuqDmeTc0wLiq0
      NkcJeVyEp84TiI8ii+WlQsiyTGdbO9FweFNMnMnWCCbvXSiu7SiOTiSTa1nfyxDAOkVoVfQP
      /x1yJY8kSVSF4IN8kp9lZinbLLRtacEvykTHTuHIJpZtFoWDQbrbN6ZJJJk8mLx3YPbfg+Lc
      inRNCssyr2UIYH1SGXiB0uv/CpO3BWvzTmRrbXIrp1V5PjPHW4VFvMEALZEwgeQ0kYmzmCvL
      C8nabbYNZRLJjk4s4ccxe+9CUlYmbccQwDqkqguSP/4n2OaO1T6QFcyBTizR7cim2n/8RKXE
      36XinNaKtDZHCbvsNE2cxbcwgbSMiE/NJGojGo6sW5NIcfZhjT6J4t6BJCkrem1DAOuQ8/MF
      jozM0j3zAr2TP8VazQAgmaxYIr2YQ91IsgldCI4VM/w4HSdrM9HW2kKwUqD54klshcyy7hkK
      BOjpWF+5RIqzF2vzN1Fc25Ck1YnYGwJYZ1R1wS8GEuTU2qSXpZJi6+TP6J75ByyX9u+SrS4s
      0R2YfFuQJAlV13ktt8AvsvO4gn5aIiEi8+OEJs+j6PXPBq8Xk0gy+7A2/wbmwP0r/sb/zL0M
      Aawvzs8X+Hj8s4vbreVFeiefoyv+ImatCIDiDGJp7kdxBgFIaBWeS8c5UskTbY7S5LAQXebc
      QUNNIknBEnoUS9PXkM2etbmlIYD1g3bp7Z9Vb5zy4CjF2RF7hra5N5FFFZAweaJYWnah2NwI
      IbhQLvDD1DSzZpm21maaSimaxs8sa+4gHAjSvYYTZ7I1ir3j95EdXWsqPEMAdSCEYPLiKDZv
      CLsCdq+X1RiYxxZLvDda37ZF7vwY2yeepXXh/ZoQJAVzsANL03Zks42q0Hkvn+T57Dyyz82W
      SIjozNCy5g7WyiQy+e7B1vZdZNPap3EbAqiD6fOHOJ920RZyYEHH53dw4swIwaZWWnwmTp4d
      ZuuOPSyMn0e3B2j1mblwcZKO3l2Qn2N8NsPe3b0MjVzEF25mcuQc7dv20NYUuHIPIQSvnE8y
      l6vU3zAh8OTH2BF7mpbEASQEKBYskV4soR4kxUT2Utj0PTVDpLmJZotEc+wMzsxCXbeQZZmu
      tnaaVmPiTLZga/lvMYceWXVb/0YYAqiDSinLG2+8jT3QirWcpaXFRdLUweLF02jVCg/u383R
      kQRmNcWx0xfY299J196HOHHgHbQq7N/RwrGhGRKqmW0+lVnNw8LMNL/z7f/myj3OjS/wH18d
      oKurFZ9vebOZCEEwc5qd408RTp8CQLI4sTb3Y/K1ABKxSonn0nGGFJ22ligt+QXCE4OYK6W6
      brHSE2eS2Y+9649Q1tjk+TS3xZrgWyWXXKCkm5icmsRrt+L2WMEeIZ+MI1VKpFKLpPMqc4sZ
      JK1CwGtjPpVDF2Yq+QTJTBaf30+wtZuQXTA6OUdXdw9bmpuu3OOpl09w6sIUFy9Ok0iksFot
      2O02ZLmOziFJFG1NxCJfJuHeibM0g704TTU9RTUTR7a6CDh83O/w0SIpHJmdJm6xU23vwyQ0
      bPnMkk5yoVhkMZXC7XJhsVhu6XnK1giOrX+Kyd7W8LkHYwSoAyF00skUNqcbRQZZrtUVFrrG
      9Pgwg4PnaN5+D91NLhSzlXNHDuDvu5v2sA+9qlIoVXG77OhCwiRLZNIpLHYXNmttCn8xU+R/
      /MGLlCvXOr8ul53u7lba26NYLPVP90tCo2nxIDvHn8aXHwYkFE8T1uZ+FLuXkq7xei7BS8Uk
      gWiELYpGdPw09sLS/ocsy3S1t9MUujmTSHZ04uj+n5HN3mWfuxoYArhFymqRfLGCz+vhcn+o
      VirIJjP1vLwBnn9vkP/yyo13a7dYzHR0ROnsbMHtdtTdNkmv0Db/FjvGn8GpxkGSMQc7sUT6
      kC0OFqplfpKOMyBXaI02sSUzQ2jqPIq29NxBOHgpSqTUbxIp7l3YO/+gIc7ujTAE0GCE0Pl/
      nnmVdy+kqIrPV4wsS0SjQXp6thAK+ep+AytaiY7ZV+idfA6nOguKGUukD0uoG2QTF8oFnk3H
      yXjstPtctE6dw704vaRZ5LDb6evuxulYOkqkOLpxbP0TJMVeV5vXCkMAK8jpYwe4OKfxja8+
      XPc5heQ8sY/eIFuGY3O1P/HC0h3b63XR29tGa2sERakvTUDRinTNvEjf5E+wVVJIZjuW6HbM
      gQ40JN7JL/JiYRFHJEgHJaKxASzq5y+pVGSZrvYOIqHQDQUp21pwbP2zdWP2XI0hgBWlzDvv
      HObRRx+o+4yZUwdJT45e+VnTYSoHh2bhTAKK1c8Xg81mueInOBz1rVE2V7L0Tj1Hz/QLmLUC
      st2HtXkniruJvK7xfGaOg5RobgrRnpwgMDOy5NxBJBiiq6MDk3JtOFOyBHH0/CmKrekGZzYW
      QwAryvIEoGtVRt7+JVr5+mnMxSqcTcDRORhNg/gco0RRZLZsaaKnpxWfr77/R5u6QO/UT+mM
      v4RZK6J4olijO5DtPsYrJZ7LzDLtNNPlttI6dW7JuYOaSdSD03HJT5HtOHv/DMXRWVd7GoEh
      gBVD58Thgyyk8+y66x6iwaVzWbKzU0wdfW/pKwtIFOHYPByfg6R6YyFIEoRCfrq7W2luDiLL
      S5hHQmAvz9M38WM64y+jUMUcqM0oY7ZzrJjhp4UFlKCPbj1L08Qgps9Zd/CJSRTG3vH7WIJf
      WPL7NRJDAA3kw+efYWF0kGA4is8fQKkjolLVYShVE8JAgs91nN1uB11dLXR0NGM2L3FtIXAV
      J9kRe5rW+XeRZRlLqBtL0zZKksyruQRv63maQj46E+P45i5+rpO8Y+/v0nH3n61aGvNKYQig
      QehVjaM/epnZ+FlSmQl0oeILhAiFm/D6AihLzLgKAbkKnJiH4/Mwlbtxd7RYzLS1NdHTswWX
      a4kojBD4ckNsm3iW5sSHKGYrlqZtmAMdJHSNn2RmGbUrdDkVtkycxXaduQOXfyv3/fozmC3r
      J9x5IwwBNIjExTnO/vIIDpcTi9VMvrhAMjVKMnORqlbA5w8SjETx1SEGXcBkrjYqHJ+/seMs
      yxJNTUF6e9sIBr2fH0YVAn/uHDvGn6YpeRjF7q2tQfA0c07N81x+ATXgorecJHzVugPF7ODe
      bzyFN7Tjpp/NWmIIoEGcefkIIx+cBcBkNuP0uHC6nFgdVkpqkmT6IqlsjJKaxOPzE4pE8ftD
      mMw3nhEWAsp6zTQ6NgcjadBvYCJdDqO2tIQxmT4nEU3ohFPH2Tn+FMHsIIo7grW5H2H38U5+
      kVe1HEG/i665YdzJGXrv/kN69/3xLT2btcQQQAMQQvDOf3iRTDz5md/JiozD5cTpdmF32qnq
      BRbTYyRTYxTVRE0M4Si+QAjzEmJYKMGJuZrzvFi6vhBsNgs9PVtob49it984F0wSVaKJj9k+
      8Sz+3BAmXyvWln7yipXns3OctsId3iDfvud/w2Suf7a60RgCaADFdJ43/q8X0KufX+tTkiTs
      Tjt2lxOn24mQKqQyMZLpMfLFWdxeb11iqOq1MOqRWTiXBFX7rBguh1G7uloIBG4cwZL0Ki2J
      99kx/gwedRpLqAtzpI8JXVDe/W16W+6u/0GsAwwBNIDYsWGO//zDZZ9nsVlxuJy4PC4UM6Sy
      MRZTo+SLc7jcLoKRJvyBEGbz9bM1hYB8BU4n4HAcpvKfFYIkQSQSoKurhWj0xmFUWS/TMfsq
      22LP4tSz2O76DqYH/gTWedTn0xgCaADHfnaAieMjt3QNk8mEw10zlawOC9n8NIupUTL5KZxu
      B6Fw06WR4fpi0AXMFuBQHE4tQK7yWTG4XLUwamfnjcOoSrVAz9yv2P/AE5iC3bf0nRqBIYA1
      RgjBm3/5C/KJ5ZUt+TwkWcbutOPyuLE5reRLs6QzE6RzE9gdZoLhJvzB8A3FUNbgfBIOxq/v
      OJvNJjo6ovT0bMHp/GwYtdNv5eHuJaJK6xRDAHWSyWTweG69UkEpU+D1Hzy/pP1/00hgtdlw
      edzYXXaqeoZEapRMbgKrXf5cMQgB6TIcna2lXyQ+5ThLUi0bdevWT7JRJeDJHQFCzpsvT9hI
      Ns2KsOeefYqpyTHSVTdOK5SLRUxmmVMnTuIOhJkcGaQkLMzFp3DZzZw8PUggHCG9MMNoLE4k
      HCQ/f55nfv4eitmEy6wzPpMk6HMzemGQ9w8dp7ezmXMjEwS9TpKJBLlihbGhc5gdbp596m+w
      uoNk04v4vW4GBs7iCYTILM4xMj5JKBRCkmB+NM7kidGlv9AtoFWrFPMFMsk0akHDaY8SCe7E
      42ojly0wNTHMYmIGXdexWm0olxLYJAlsJuj2wn1R6PVBVUBSBe3SqJDLFYjF4sTjC5hMJnpb
      vOxuXuYSznXE+ikDdotIkoLD4UAIwbFjx5CLBRw+G0nJT0dpgbffP8GT34wyMTFB2OckOT/B
      q29nKS5Ms32Lh1iml6AQ6LpAluHNdz+iLWDjwPQ41mAbboeVN954m97uFj46PMfpgVG+89tf
      I5VMcvTsa4SamunpaOXjjz9iLjZC67ZdvPXWuxRSs2zvbmN0Ns3WqJfUVH2L0VeKSrlCaiFJ
      aiGJrCg43c20hbcim6uks+NcmBlCMpfxB4IEQxEs1lpGqSJDlxc6PbWkvNMLgiNzEMvWOnoq
      lePI4bN8c0/Thu38sIkE4I80k15M0NHvJTldJZtIsPXeJ/DMjHPk+CiPPXYf73/wIZGAm0OH
      jrC9v59jgxdpam4h4NVQqwASd+6/n93bInzw2ouY5G7cNoGry810uUxqdhJZUQhFIuy//wsk
      x85gCXdhT5zEZjEhXZqxreo6DocTITRCTc0EvR4yWs3kWYzNN+wZ6ZpGNpUhm8pcCrGGiXo7
      sDgUsoUphgfHQc7jD4YIhCJYrTYkCRxmuLcZ9kdhriA4MgsnFyAQ8NHfFW7Y91kJNo0PkEgk
      CAT8TE5OU8wsUBQ2tvW0cuToae7av5/h00cJtW/DpujYTYKBkWm6Omp7ADstAs0axCbyZMsK
      PreNRDzG0ESCfXft5vSJY/ijbYRcJk6eHeWOO/rRdBmXTeLo8TO0tnfgt8ucn0jQ3hzC53Fy
      9OgJdt65FzWfwWkzoyl27BaF1//i55QyxUY/rs9gtdtwuBxYHSaKlXnS2XE0sviDgStiuJqK
      BpbOPWzb3d+gFq8Mm0YAG4FiOs8bP3geXVvephZrjclsxuF2YHfaKOuLl8SQxuv31sRgs4Mk
      0fXgE1jd62+V13LYNCbQRiCfyK77zg+1Rf2ZxTSZxTSyLGN39eFwOdC1HFOjMSpijPbtO7C4
      1qZ+52piCOAq1GyC9w+dpCIU+jvDDI1P4wq0cO9dO1fk+tm51IpcZy3RdZ18Jkc+kwNJwmZv
      w+PZTlNn34Z2fi+zseatVxmLK0DU76BQLNHWs4P+rW2k0is3YZWdr6/u57pFCEqFIonZBJ7m
      je38XsYQwKfo3bkHUcwyMniM0xNZvvLIvSt27UIyt2LXaiQOnxOHf3P4i4YAriIzP8X7Bz6m
      pWsr2WwRczXHuZHYil2/mNocu7YHOsLIdZZiWe8YPsBVeCNbePxLW1bl2lqlSim7/sKfN0Oo
      O9roJqwYm0PGG4BysUy1vIzS5+sVSSLYuT5r/NwMhgDWiHJBRa+u/xDoUlgdVuyejbPiaykM
      AawRlcLy9vBdr9h9TpSlSqxsIAwBrBHlTSIAV2jjT35djSGANULN17cTy3rHGdwc4c/LGAJY
      I6rqJnCAMUYAg5ukXCw3ugkrgs3T2E20VxpDAGuE0FZpCeQaY7JuHgcYDAGsGdpqrQFeY0zL
      2KtsI7C55LyOEbpodBNuGUmWUMyN2c93JRHik/8L041+YbCyaOWlN55b78iKgqxsfAG89Pxz
      uAJR9uy95xMB6LqOtkns1PXIpni1SJf+bHC2bd/OyOgYQxfOfSIAWZZXbBdwg8+ifF4F5g2C
      XtVXr57RmqGTTmcuvZBkwwdYK2TTxo83CF3fBM68zL77H7rqJ4M1YTOMAABaZaML4FqMEWCN
      kJbarG6NkaRaSXSL2YTZbMJiVi79bcJsufrnqz43K1jt168vulExBLBGmCyr96glCUwm5drO
      bDFhMZkwW6763KJgNn3SqevdYPsaViiatV4ijoYA1gizo766q5IkYTYpWCy1N67FYqr9bDZd
      +cxsNmG1mK7q9MrS26GuEGKFUjp0XUfXG78+whDAGuH2uYg2+a507ssd93qdeT2XGxHFzZHW
      fRlDAGtEsMmHb09Xo5tx6xQ2R1LfZdaXZ7aJkTZJFEgU1U2R1nEZYwRYK8xKbRZ1A/UdIQR6
      pUopnUPNFihl8+T1Mlv3tGNxNS4tWug6Aur0ewSapl/ZAwFA0zRkRUHCGAHWDpNSK7q/DhFC
      IISgqpbJzy2SGJpg6tggQwdPcPrESQYWxhk0Jxlq05nqtpBMf3Z711tlLnaef/8X/4Z/+5f/
      geGpxJXPs3PjnLs4e82xkwMHeO3wEAA/+Zt/z6GzMQqJcf75n//gOleu8tRTP7zmk+eeeorC
      pX8bI8AaIZkUMJug2lgbWggBQlAtlSll8qipLMVMjmKlTEHRKLtNVNxmqgETwnT9t3wyMU9T
      68rWT4q0b+NL9/WT8NxBs13lr//qr7B4muhypnnt5Bz/9Hv/mNdeew3N7OHJu5uvnFexuLk4
      cAxtyoTb6yQ5M8qPfv4rot393LHFzqsHjpPMCwaPf8R7B4/Tv/+LAMRHB/jVy+8aAlhLJJt5
      xcKI9XC5s1cKpUudPUcpm6dYKlI0i1pnd5mpdprQra66r5tcWEAIsWrRqnPHPqbqFpkAABJB
      SURBVOS+J79L7N2fEe7p58HIvXitGq2dvZw8cRz4RACybMNMmemCTJPLxMnDH9Kxcx/p+SkO
      HFrke//D9/jhUz8iky9xx+5dDF44hw2wOpzYzEYu0Joi2SwIVqc8ohACoetUCiqlVBY1naOU
      yVMsFlCtEmWXmYrHTCVkQrfeWk3/fD6HWiphs392x8hbwe2PIBx2+roe5r/++O+w+VvY0dPH
      u3/7Y7r9jzJy4RxOjx+b20/YXBudWlpa6GpycD5lxWWzcued2/m7F17B39zF/m3NPP3Uszi9
      IdR8hrHZNJHWrTirdiqFApKsGBtkrCVabA59dHbpA5dACIHQdNRcofZWT+coZXKoqopqhYrb
      TMVppuI2odmU2lTxCrN77z1Et7Td9PmaphkTYbcbktO29EGfohaJ0VCzecrZPMVUDjWTQy2U
      KNskKi5zrcOHrVQdjlXp7NdjdnqKptYt63rSrh4MAawh0hLpEEIItHIVNVtzTkvpfK2zF0tU
      7UrNjHGbqISsVB1OUBrX+RLzs1TK6pVdJdcTQtfRBJjqiLoZAlhLrGYwmxDlSi0So1ZQMzlK
      qRxqJl97y5dUNItM2X35zW6j6nQh1tl6Aq1aZXZ6iraunkY35TMUZs7y2oUq/+ixOz/7u9Qc
      P/zJz5AUC7/2G98yBLCWSLJMen6R7PkJ1GyeyqXOXvGYa6ZMxE7F6UaY11dnvxHxqUm2dHav
      SzPo6IdvEhs4yMP7t6OEtzE5cJgvf/0bfPDmyzzy9e+QmTyLXdENAaw1BbtM3K5SCdupuNzo
      FnnN7PaVJr24SD6XxeVef9Xi9n7hiwRy5zAFOznw6t/ji3RgvrQGolypsDg+QLxQ3hwzwZVy
      iWw2i7ZUjooQLCRqs4y6VmIxmaNSuXHJwoWZGMPjMwiho6q1+H1ZLV1zn8ziAuVLwYyFhaV3
      gbfs2kKuw4UatKJbVydCs1YIoTM+PLRucvsvo9g8zFw4wkhKYVtXOx6pyB33PQDAg1/+Okff
      fIGxpE7/tl0o3//+978PUC6XsVrry1lfb7z1yktkCwVOnR2lyWvlzIUYEY+F46cHUTUFrVzE
      brczNzfLgXfepKCZCAcEJ08vUClncFjg0LEzNLe2opUyHDx8HL/fzd/+7TP09e/GLjL84K9/
      xENf2Mff/OW/xt25l8XYINmyzNzIWaxN7cQGj/P2x8fZ3t3K4WOnCPg8ZAoVyvk0+UKOY8fP
      EGluxqwoTFwcbfQjWzHy2SzNbe2YzctbKXY5/WI1MDm87N+3l7vu6Cc3P87wosSj9+5GAkwW
      O3fevZd9+/bh9zg3hwCGzw1QrOg43H4GTp2g1VFmeGqOnL2T+PAxkskknR3tvPf+B0iKlRZb
      njguylmdVHKGkeER7rvvXhSTmXffeoO9e+/kwMHTtLW1sPfO3VRKWRbiM5icThYXktjtZrLC
      zezQKUw2K1o5R5YAVlFgfHSUu+7axYcHjzMzPcNcfJpw0MfE8CnGkgo7elqZjo1TrW78YrlC
      CEqlIpl0hrbO5aV6r6YArsbm8rF7R+8Nq7lsChPI4QnSGQ0gm80UMgnGkyp+q4SuVdCEhKhW
      mJ4cp1ABs0lmMVPCeVWNS5Mi1UplCDDJEqlUGtl07Rutva+fN196iR39vSgmM6V8loomkKkl
      eKrFPMlUBkWWSKXTKFY3dpFBt/k5fuwEvdv6ENUKkiTh9m7s3dWFEBSLJcaGR9GGR9g+OgLF
      jbn/2aaYCc5lszjdbhILCzisCiOxOTqdWV48V+WJB+/ERonxeIpo2E86MYuwemlvDpAvagi9
      gt0ic350ih3b+0BTOXdhlL7t2ynma89Er5YplnWKhRxuhw1hsrMYH8fkCuG2SJgdLiZHh7B6
      gkR8Ts6PjNO3rY9yLoVmdqFUckwvpGmKNOF22YmNDHP+zMlGP7ZlU3vjl5iamCRcKvFIKETY
      aq2lYHR0YX78y3VHhNbLTPCmEMD10MsFisKK07r+FqLks1k+fPt1WGfO440QQlAoFJmanCRU
      KvFoKESTzYYQgnI6Q/L8MOVCkej//udYujrruuZ6EcCmDYPKFgfrtZK9w+XCZrdTKhSWPriB
      CCHI5/NMTkwSVFV+MxSiORRCCEElXyB1YYTi/CeRr+R//SGRf/kvkOqoH6ooyjWLVBrFpvAB
      VpqJkXP89IVfrdr1JUkiGF6/W40KIchms5wbPEdxaITfdLn5blsbzXY71ZJK8twQ8Y8OX9P5
      AdSzZyl8+FGDWn1zbNoR4FZo69nOyER8Ve8RDEeYGh9b1XssFyEE2VyOqYlJgmqZ3wyF2NJU
      S3nWq1VyE9NkLsbQP2fuJPWjH2O7Yw+KZ/1Njl0PQwANwh8Oo5hMaNXGl02/3PEnYxME1DK/
      GQ6xpam2F7DQdQqz86SGRtFKS2/0pyWTLP5//4nQn/5JXaZQozEEcB3Gzp8hl8txfmySbV0r
      u/TvMhaLlUAozHx8ZlWuXw+Xgx+x2AQBVeUfhcK0NdmRJAkhBGoyRerCCOVMdlnXLR49RvaV
      V3E/+cS6zBO6mk0bBdoIzEzEOHPs8Jrft2bj55iYmMBbUnksHKLD4bjS8Su5POnhUYrziaUv
      dgMki5nIv/pfsW7duoItX3kMATSQclnlg9dfWTMz6HLHH4/F8JRKPBoO0+10Il/q+JqqkhmL
      kZ+aQaxAiNIUjdL0r/8cZR33K0MA10HoVTRdxmSSqVYqyGbz54bL8rkMZpsTy00Uvzpx8MNV
      N4OEEGSyWcbHYziKJR4Lh+lzu5AvmSd6tUo2NknmYgyxwvX/Ldv6iPyLf45sW38LZ4DNkQtU
      H4IXnvsxF8eGEY4oDkWjotcWkmczGUxWK9VKFYRGZnaEIxeSREJuzn74IZbmINmkilnWKKhl
      rBYLFbVIrqgiVbP8+O9+Sff2HYwPHEd2e/no46NsaQ6TzRexmE2oqkpVg0Iui2y2UFEL5Aoq
      VqsVRVGYnZpcnW8sBOl0mgsXhinHZ/my389Xo02EbdaauaPr5KfjLJwcqIU0V6Him5ZIUJmc
      wrF/37p0im8rJ9jq9LK1M8j87BQnPhxCspjwWgWhaDMLmQpmUaXDU2Ve8jEZSzATG6Qv6KVS
      yDB+McHs1Bi9O3ezs7edV15+BZfdjL+lDcniwGKSyafmee6n5/ntb32L1195CZfDitMb5MCR
      AR64u4+FgkDXdPpa/Rw6fILHfuO3CIcjWG021DoiLPUihCCZTDEei+FQy3w1HGJna8uVN74Q
      gtJCgtTwGJVsbsXueyOKR46QfPoZ/P/9f7fuRHBbTYQV8mnefP8E2zo9TE3Po8gmZJubPbt2
      I2kquq5TUkuATO+Onbjtn+yJq1fLOP1N9Ha3g6hisnvZvnULumSlq6sbl82CYnGwd08vo+MT
      yGYn/b2dLKazfOGxr2DRCiTTOSwWK4PnL+C2yGTVCorJRLT15qsrXI0QgkRikRMnTjF3YYgn
      PB7+qKebXV7vFTtfTWdYOHGa+eOn16TzXyb3xpukfvyTdbdh+G3kAwimpqaJhv0MjcepZObJ
      CRu5+YtYHD52330v8dEzJFI5tvX3M3BqgNauXvwWcIS85LJVMrMXyQk7d+3axsWhASYTRe7b
      t4fZ+TStzWEWZqZwR1qIjQ5jUzQuxjPs3d1Hrmoi6FL4+KOD+Fu6kAsLJNIq/fv24bNbyKZT
      HHz3rZtODxZCsLi4yMXxGM5yhUcjYXZ6PChXvfE1VSU9PEZ+ZrahOUiux7+E//d+D2mdbLh9
      Gwng+kxNTdHa2troZnD4/XdILS4v7Fjr+Ekujo9jV8s8FgnT7/Ve6fhQc3AzYzGyscl18/a1
      799P8H/6Y+R14HPe9gJYL8xOT3Hq8Md1HXu544+Px7CqKo+Ew+z2ejBdVS1Z6Dq5yWkyYzE0
      df1tamHdsYPQn/6zhodIDQHUiZpd5INDxzHZPWxt9nBudIJoex/9ve0rcn1N0/jordcpFm5c
      OlHXa6bOeGwCU6nEFyNhdnu9mD/V8YsLi6RH1sbBvRVMra0E/+kfYenqatiMsSGAOtEqZTSh
      88IvX+Y3vvk1Spk5Pjg+xpNffmjpk+skNjLE+TOnPvO5ruskEovEYhNIpRKPhEPc7fdjubrj
      C0ElmyN5fhg1mVqxNq02ksWC77vfwfXlxxsSITIEUCeVUoZf/PJVHvnKk5QTYxwbXuCrjz+M
      eQVr/lfKZT544xWql7ItdV1nfmGBiYlJpGKJh8Ih9vn9WD/VUarFEqmhEQqz8xtmkc2nsd+z
      n8D3fh9ljZeLGgKok/jIKQ6cnaE52oSWiVNVbLS097Cte2VCmJcZPnuG4XNnmV9YIBabRFJV
      HgoF2R8IYPtUx9cqFTJj4+QmpteNg3srKMEgvt/5xzju2b9mo4EhgHVGqVjkr37wF6jpNA8E
      g9wTDGD/VGfQqxr56RkyY+No6ubatA7AtnsXvt/7XcxbVr/4riGAdcjou+/QfOHcZzq+0AXF
      hQVSF0aoFjZmFYa6MZvxPPEE7q89ieJdvcU1hgDWI8Ui/Pw5KNfe7lcWn18YppzKNLhxa4vs
      dKJ88+u4v/pruFahEvVtlQu0YbDbYWc/nDhOJV8gPTxKYW5hwzq4t4Kez/PRxDgDb79Ok9vL
      13fups3vX7HrGwJoAKqqfm7mraqqWHftIfPaG6RPD2wKB/dmybucjPZ2MTK/wKHxGC+fHWB3
      Sytf6t3G/vYO3LeYZm0IYBVZiJ3lrSOjKDJ842tfYXExRSQS5qOPPuL+e/axmC3WinVlsuiY
      8HudzM/OcvzMWX7t8S8h33Mv4sRn5wVuJwZ37yCn6yTytRIyVV3n+OQExycncFos3L2lnS/2
      9rEjGsVjW/6eZYYAVpFqpUqktZ301Ahvv/Um0UiQofHaHmELs9McOfgRXTv3cOTcDEGrTnuL
      D90aoFKpvfGdjzxM7s23KI+MNPJrNIyi3cbItq1M3WBiL18u8/7oMO+PDtPh0vh3+3Iorm2Y
      3NuQHZ1IigNJ+vx5GkMAq4qgUqnwyJe/wqED79HX18t7Hw9gVeD02UFaIj7SmSLdvdsxp2Mk
      s0X27+5hYXYaAElR8H77W8z/H//nbWn/D+7eSUGSmKsjpWObYxGtMIlWGKU89zLIFiSTF9ka
      RrZGka0RFGsTmBwg26loCsLqMASwmnjDbeyPOvA5bdy7/04OHR3ggQfuJZtcoFJIEV9I09vZ
      hTA5kMt23C4rR48cpWdr35Vr2HfvxvHAFyh8cKCB32TtKdmsDO3oZTqdQV9S/IId7k+JRC8j
      yvNo5Xm07NlrfpXL5zl+7jyjd3/VEMBqYvcEuGyVeoPNPPJwbYNnV3Mz0Ez7Ndtr1ULQDz34
      hc9cx/+7v0Pp1Gn0zO0TAj3fv52SyUQ8vfR3tsiCXd76S7dUNQ0BVNFvrxVhGxXF68X33e80
      uhlrhmq1cL5/G3PZLJU6qlN0Ogq4TfVHyjRNA0lCSLIhgEaQiMd46603+fjYmbrPcT78ENb+
      navYqvXD0I4+VIuFyWS6ruN3ftr8WYKqVkUYAmgcgUgrna3NLMzP132OJMsE/uAPkOzLD/Vt
      JMpmM+f7t5PI5VHrqpckuNtfn1Auo2kaQpJBNgTQMBSTmWp1eYls5uYo/t/9nVVq0fpgZPtW
      inYbk6n6OrVD0ehyLC8vStM0xKW1FIYAGsD0+DAjsUmi0ZZln+t89BHs996zCq1qPFVF4Vz/
      dtLFErk6l3Fud+cxy8sLEVc1DV2uJRoaUaAG0Nq1jdaubTd1riTLBL73+8QvXEDbQCu/6mG0
      r4eCy8nUzGzd59ztW575A6BVNcQlARgjwAZE8XgI/PEfwzorMnUraLLM2Tv6yZcrLNa5c450
      vfh/PffSDRNow2PfvQvvt36r0c1YMcZ6u8m7nEym6h/VItYyzbblV7yoVj8xgQwBbGA83/g6
      9n17G92MW0aTZc7u6UfVNBZyN66K8Wl2ezPIN7FgTNMvRYEwBLChkWSZ4B/+IaZotNFNuSXG
      ezrJet1Mp9J1pD1cRtB/E+aPEIJqtYqu1NxfQwAbHNnlJPRnf7Jh5wd0SeLsnp1UdZ34Mnai
      MUvLS3+4jECg67rhBG8mLG1thP7Z/wKmjRfUm+hsI+33MZvNUV3GphwdjuKy0h8uI/SaAHTD
      BNpc2Pbsxv9Pfg/W+Z5cV6NLEoN7+tGBqTonvi6zy7P8tz9cKhRsjACbD0mScD3+Jdxf/1qj
      m1I38dZmEuEg89lcnWkPlxHc7bu5zFghrjWB/n9Y49gar+WioAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Geo Map (Medal Count by Country)' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nOy9Z5AcZ5rn90tTVVnedbVvtIP3IEAC5AzJmdnhuHWzu3ervdtTSAop9E1S
      6IsU+iJ9kkKhUMRFnKQvCp1Cu7e7N+tm93Z3OJ7kECRIkPAA4dp7W95mZWW++lDI6qrq6kZ3
      o8FuDviPQKAr7ZuZz/O+j3+kXC4nVFXl80SlUqFYLDZsE0LU/pYkad05QggkScLhcGAYBgCW
      ZSHLMqqq4nQ60XUdh8OBoijk8/l113A6nbhcrl1+mi827l+7ieb3MXTkUMP2bDaLz+dr+S1+
      naCqqvq5E4UkSei6XvttE7e9rxVsBqlUKsiyjBACRVGQJAm32025XEYIUbuuLMvrznW73Tgc
      jufyTF80mKbJ3OwsSwuLxIoR9AEdn89Xe28vykQhP/2Q54f6WR/WiN/eLoSo/Wu1X5IkZFlG
      kqQaA0iShCRJ6857kYm//l3YWF1d5fY7H9AeCHP44jk8Hg+WZTUcUywWyeVyz3188dU4j+7c
      wzTN2ra52Tk+ufzhunHvNvaUAepn++aPZBNzKyax/0F1pmr+SPa17GNUVcXtdj+vx9j3ME2z
      gbhTySTJ+SXCwweQwl4kSUJRFHK5HDff+7Amnk7cuc/klZvrGGO3kYknKM+uUMjnqVQqzM/M
      kn04SawAK8vLz/Xee8YAzTN08+xuo54JWjGIruvrttvnASiKQiAQ+LWXZZthGAZCCAzD4Mqv
      LjM7NV3bZ1oWM1PTdOQFS48mGL/7AMuyWJ1dANOkVCrx8PotHKkiDkne0Sw8PT7BJz99h8oT
      fW0zDB45xMnvfg1/IMDog0cwtsiAP0pXKEp8Yva5rgKfr/bbAvUE20y8NjYiXkmSME2zQeSx
      mcmyLCRJ2leyrD2T1usnuw0hBJlMhhu/eJ+iUSYYDRMtwcLIOB1dnWhuN6sLS4iizu3EFJ1u
      P+5IkHQ6TWJqDo/iYOSj67Q5PMT8IeJBFUVRtj0OXzBA36mjqFsUO+1vOP9ojAO9awp5j+nk
      8fXbHLlwdttj2Ar2nAGa0cztQogawdQTuRCiJjPWHwPg9XoRQqCqO/t4zwP22JuV891cmYQQ
      XL/yMepqDs3pwtPZhiQEnS4PklVEeWLtGzg0TGdvN1PX7yFFfBw8dJCJkTGOhjpxKArjIoen
      p4t4sUj/4YM7GkskGt3Ree0d7dS/kVxZB7dj19+VDalUKonPe5Ysl8tks9m1QTQ92EZLXrNO
      0EpHsCHLMoFAYF8wgC2KWJaFpmk1sU1VVXbbBF0qlbh3+w4HBgd48N5HRDUfojfC4RPHcTqd
      xONxvF5v7d4P79xDpPOUHBKOVBEVie5XzxAMhXZ1XE+DEIKJRyMws0p3IFLbPpNcpf8br+B0
      Op/LffdMB2hWgJv3teJ2W4RoZS0CamZRoOYP2GvYplld1ykWi+Tz+ZpSms1mKRQKWJbVkpEt
      y6JcLjdc62nQNI2z51/i1i8vY5YNUgGVQ8eP4XK5mJuZYeajWyRX4wB8+u5lxq7fwW2APxjk
      5HfeZOBrr3zuxA/VZ5t9PEanb+3e8VyGxeTqc9UB9pUZtH67LcPXM0OzfG9vl2UZWZZxOBx4
      vV58Ph8+n+9ze45WsGd9qPoubDNtqVSiXC5TLBaxLItSqUQqlaoda8M0Tcrl8roVYivEoKoq
      Ry69RFqxGBweRpIkZianiLbFcPXECEUjqKqKVLHwRkPEnRZOzUU2k9kza1m5XMbX2caj3ArJ
      fJYfPbzORDlNIBZl/O595ufmngsj7CsRaDPxptlZ1nysoih4PB4ymQyapuH1ep/3YzTAHo9p
      miiKgmVZZDIZXC5Xg4NuI/Ouz+fbVYW93qDwyUcfU05m+er33mp5rGmajN66R7i7g/auzl0b
      w3Ywcv8hnakKS9kUU1aeg44g7b4gkiRxL72Iki8TONrP8LEju3rfPVWCNwt5sPfbH7JeEW4+
      VwhBpVLBMAwcDgeapj3voTfANM2aaKMoSu2fZVkUi0V8Pl9N5rcsa50X3OFw7LqMW/9+Xnn1
      0qbHKorCkfNndvX+24UvGOCjOx9zuK0Ln9ONU6yJsyFLIRbrZH4liTi6u8rwnotAzd7eViEM
      9X/XmzybnWeWZe2J4muLOzaRl8vlBn3FMAw0TaNUKlEqlRpkfkmS8Hq9vxZ+igf3PuPaex9Q
      1stPP7gJ0Vgbw+dPI4Y6KC0nCXv9tX294RguhxNZc+36e9pTJbg5/mezh9vIUWaj2cT4ecIO
      x4CqFQaqcr+9zZ7xfT4fmqbVZntJknA6nXs27t3G0RPHaRvohR3QqMPhYGBoEH8ggNodpVxZ
      70CzJ7zRx4+Zn5rZhRHvE0/wRp7erZwLazFB9uxaqVSe06hbQ5KkBmXVHoNN2PYqIMsyHo8H
      n89X+//XKeJSkiQGBgZ2JM7ZE2I0GuX4yRPkyqWG/YlcBjXgIZFIMHr1FqnJWZZ3IUxiz6ee
      ektPs7VnMw+wPevWH+P3+zc973nB9jg3r2T1TGoHltk6TqvgvEqlgmVZzz32Zr/Cfm/hcJhc
      0MW95RmWMykAIr4A5WSWpckZ3jh0ivnFRaY+ukmpKax+u9h3wXCbiTj15zUf73Q6a/b1z1uk
      qJfrW61sNgzDoFAorDu/UqnUztuL8e8X1E9eh186zYXffgvn0T4mMquMry6gBXykFpaRJYle
      b4gTHQe4/sFHDVGk28WeWoGaozZboTm0eSMGcbvdyLJciw36PGEn6SiKQqVSqc3szbO5pmm1
      EI56Rd1+xhc1XHszdPb10NnXA8DS4iJdc0mEEAzEugAYkH2kUimiOwy92POppp5Y62P5oVE3
      2Ehhts+xiX8vZk87QcfpdNbGY4s49jPYySblcnmdjqIoygs7628HqdUEMX9wHc3Im4TEPA17
      tgK0sto0K8EbhUY3+wJUVa2JEXsR/mDrALYY5HK5KBaLNetPfeqmHRYBL07W1XbQKmjQ3m4k
      MpiKl4V4HAuBHPbhOBAl5vezsryM1+fbtgN0zxjAnjVbiSv14Q71x9bvbw6fbrVafJ6wwzEs
      yyKdTjeM3+Fw1JR2exX4UtxpjY2MGIVCAT2RJnkkzIELFzFNE4/HU9u/srBI0efHe3Boe/fb
      q1CIzVLt6sMFnkbMtuhRqVRwuVxomkalUnlu0YNPQ6VSoVAo1PQBeyx+f9WxUygUKBaLSJKE
      pmkNH/FLbI5kMkk4HK79bo4J2wn2VASC1nE99fs3O99+eMMwajE3tjd2r6AoCg6Hg3K5jGEY
      DT4CIQTlcrlBZ/gSa3jahGcTvxCChdk55u+P4PZ66TgySFsstqN77onm1Wp2bw4S24p1qD6k
      wDCMmhK61wqlrus1a1RzPrLP58PtduN0OvdFuPZeozksZCtYXV0l+9kEJ0NdDDsCLN8fq+Vb
      bBd7QinNxG4TbavfrbzDzS/Mtp9ns9nPpYrBZpAkCY/HU1udms2ddg0j+5gXHbqutyRcIQTz
      s7MkE4l1xy/dfEB/OIZpWXy2PIO3r6Ma3r2D97lvbG9PmwXs/fUOp/pj7RewH4jKJnCgpThm
      K8xfFJimyf0bt7n/wVXyuzzBbLYSzoyMr8vrmHg0woBvzeYf03yk7o5y86fv7SgEZs/zAWxR
      pn7GbxUc16wz2PvsF2g7mWx9YK8hhCCbzT61HtF+9/wKIbjz0acMCDcu1cEEBY5dfOm539P2
      6ts+Evt7P7h1hwNFFaXpnU0WkmgHOsjHUyhPfEKdw/1EotFNJ8U90RabB9Ts1GqlADc7P2zo
      ul4LKNsLL/BGkCSpZvnZCM8jw2k3YVkWow8eISdzuNoCAMjq56O31BsOACZGRimWShRXksj+
      9oZjhRDMJ1fpqFQYDsTgSWTE6M0HuL9yHrfbvXFc2V6uAPUyfCvrT6tB1+sB9SUS7UQY0zS/
      tK48Ax7fukshX0BSZNScTrfLj9tZpY+RlXkG3nz5qYz9rBBCkEwmuf3JNV569SIul4urH3zI
      sOynzRvY1rWurkzy8tffwONtbW7eM3thsxJcvx3WJ8BDo/JcLzaYpokQoiHW/ktsHbbo+OF7
      v8JbMDnV2Q+ShPSE0JdyKUoBF4ff+sq2xUvbQGFZ1pacf/du3SE7vYDfoZFdjrOwsEB+epGT
      WpRSixyBp6FT0piemODoyRMt9++7lMj6fa1WhWYLkn2sZVm1gLQvsT0kk0lmPr3LKa0NX7Bq
      shVCsJJLk3cr9L5yAt8OZ337Oz6N+IUQTE1MsDIxzWF/jKg/iEdSUKYT9Ac6kCQJr2t7qa5C
      CLLFAlo8s+Ex+64wlo2nOcSamUAIUYsHqj//S2yOcrnMyEc3OB3tqb2zUrnMvFwidmaYvh06
      mOqRSqUIh8Mtv0kykWDy/mOUZJ4OX5BXu9cKcXWH257pvpIkIWSJpKVveMyemR82c1rUx8bb
      aJU7UA87ET6bze575XI/QIhqpYob71ymw7Hmk5iOL7Ha5uTYay8T2wXiF0Lw7i9/ue6b2H6b
      1esPOawEONzeQ9Cz+6VsTvUM0hHaOFR6XyjBrdDKWVa/z95mmxHtmkDFYpG96HnwRYMQgr/6
      kz/jzf7jhDzVCMrZxApiIMahY0d3/V7138+yLN5/71dUlpK8NngMiZ2t2K2cpc1YKKTpuHhq
      w5irPU2Kr8+gauX13Uz8qY8UhbV0Qk3TviT+LSLUFkF7Ipun8jlW9By9A/27cu2NrHmWZXH7
      +g0Wxyb5yuAx5A2clxuZwuvzrJ/m+JxOrxI5d3TTYl/70gOz1SjQ5t9PW1X2CraVZT8hnU4j
      pwo4FIWldIIHuWUOfeXlXasM16rco10swOFwcCja9VQjSKttdniJ7fdpZS00LYtxI0M55mf+
      8VhDUbJm7GlViFZo9UCtzm2OG1JVFa/Xuy+9qvURofsBQgju3bnLsc4DVEwTo1Lh+CvnaYs9
      m9JZj/o6rZZl1ZyUTqcTn9dLLBRed87TdLf6MJhmHbKeXmaNHMdeu4AeT+HJlGv1VfcVA7TC
      Rp7gVr6A5tAJO8Jyv2I/rUyL8wtoq3kcskKmmGfczNLe0f70E3cI+7va/ppANMJCeX0Tw62+
      o1YGFHvbbClDySVz/fJHHH7lHOZge81x12py3LNQiKclvGyWLQbVLCtd12sv1i6L+CU2h2EY
      jHxykz5viIDHy3sPbnL86689M4NuZKxIpVIszs8jKhZWoQTFMgFL4VSoq+U1njaOjayHumEw
      m43TeeEkqbv3IVNk7sZ9koUsXq+HQi6Pnsyg+Ny0d3fh8XhwOBx7wwAbBbbZ2+oV5M2YwO4O
      qWnal8S/RaiqCgE3K/EklmURG+ijf2BgW9cYvf+QwmqS46+93BCzY4el2Egmkyxcuc1QWyeS
      pIDsgE1SdnfKhBXLZNrIcPxbr3Pz2nU0U2K48wCSJBEWKtd/8T6v9R9Bc7qpJE0WJ26z6le4
      +NXX9r4y3EbWnmYNv/k4u3y43+9H07R9JWPvZzy8dYdBy8PJA8MsZJMcv3h+W+cLIUjOLYJu
      1EKjlxeXyKQztf1QLWEiSxJuh/O5i3+35ycwheD+O1c4Yno5GIjV7hn0+DjfM4z2JJ5JVRS6
      wm34hMLUxOTe6wA7tf8qioIQomVD7C/RGqlEkuLMMrFACKNSQfc4tp2T/Pjufaxyte7p3KMx
      SqUSqkPl7o2bNeI3TZN7l69imhZF+flUubPvVdBLlEo6RzxRDgViqC3k/KCncdlRZJmDrhDa
      ZHzvQyE2swFvFAJdX1hqPymX+x2yqpDKZqADcnqRY2dPb/saZjzNmbbe2u/JkVGOnjoJhkk+
      l8esVJgbneDS976J2+1m8Tk55W0x2e108drw8ZY5JE9DyOvbX8FwrWz7rTzAlmVRKBTw+/0N
      5Ue+xMYQQjA3M8PJngEADGHSEVlvitwMhmEglSrgWbum9OSTeTWNQi7L6tIKy2NTWMsptL52
      oieGeTQywSFX+JlM1FsNl6+Na4v79kWPsK3stznediipqkqxWNzXps/9hJmpKVwzSfxalXor
      loW0TYKMx+NEtDVxYjWfob23h4c37yBnSxSyeUQ6jyvs53B7D326g/j4DAPnTvJ4ZQ7rGWK0
      nhbyUI/tONj2VYOM5hBo0zTRdR3DMGrODDsF0n4ZdmHaL7E5FEWlWNZZzlRra4Y1D4mV1S2f
      L4QgObuAX1vzFBcUQTqVIpa1CLu95LNZDnoivBTurfpqJIkeyc3MlVsk9AJLmeTzeLRnwp6V
      RbG9t6qq1mR627lVKpVq9fTtXr920rsQoiGRulWtza1go86MnzfsZJHtzHA7QXdvD8UOPz+7
      f4NMsYDX5SYzv7Slc4UQPLpxm45CU8kZl4pZKOFUVSQkfOEQI1KeifRaZ0fN4STm9qF4NNp8
      gYZr7gfsiQ6Qy+WYmJgAwOPxUCqVanEdHo8Ht9tNMLhWBNWe4euZxel01kqgbPdlClEtULWX
      QXOWZbEaj/PTX7xLRyyKhYQpu/japXN4n0O1OEmSeOnlC+TzeUaX5zg/cJhwERZmZunq6930
      XMuyqCwl8USrzit7te4wnWR9HmYWphkKxCgu5pEKZSZzaXp9YVxPfDNpo4Tq92CaFqq8v/I1
      9oQBXC4XnZ2dyLKM0+mslQp0OByUSqVaEnO9WGQ3nav/DesTY7YCSZI+90Z6NoQQ/OwX7/Dw
      0SMcbh+BnoPMJ1dRXB4Wp+6R0OFgm4eL58/selyTLMu8cukikw9HuD49QTGfpzD1mG//0e/X
      ioq1gmVZZN1KLfTcPk5zOFnK5lBjIayShdvpwu100RmMNFwrl81STOks+gUD4ecXcrET7AkD
      2PH6NvFqmlZ7YV6vt0EcqLct2yKRrQ8Eg0Fg/8wmG8EO3iqWSiwsLLCwuEjBlBk8eonszAM8
      3YdQVQftnii+WDfjyRWCj0c5fvTwro/F7fFw7KUz8NKZ2rtNJpNc/+X7nP+NN1quiqqqEvL7
      kc1GhiyWdfzdUVLzS0isrVrN36Mv0k5iZRq3uv8MFnuaEdZM5K0Ivz7uW5KqdUDtArSpVKpW
      a3M/o1Ao8JP3PuTTT6/xyY3b5B0hfNEuXN4ArtgBFFlGKcRRylnmbl/mcNDi6OGDLC0uPtdx
      2e/U6XTitWTGr94im1mfPytJEsXM+oJYxbKOU3NBfPMwdL/bg7MC0iZBjvD89YKWEQf7oTDW
      Rvb++n32//WFpDweT0Nvrv2IeDzBP/zobWZX0zgcTgYvfAOBQHtS3sOyLNpKcxw/2E8un+fy
      nTEWZmcY9jiRywZHX7vAsRPHd3RvIQSFQmFLNfML+Twf/vgXtCkaqltD9roIHOim90AfkiTx
      8c/fZdgZrJlRAfKlIpneINboAj2bpB0C6EaZpWyKA5E1EcguJ2+PdS++456WRWn+e6MZoH5V
      sI/1+Xz72gdQNgzm5+d55+odlnMVwt2DuP0hrEIKZ6hj7bhijraQF0VRiEYi6PEr/N7QIXqD
      YYplnfc/vUk5nUP1uxkYHMLr23oDiJmJScojc6h9MQaOb9xhXQiB5nZz8tIF5NFFgu7qPfJT
      Ca7PzXPu4su88htv8vDKNeprQ5jCwu/3syTNUSzrpPQCXf7WzjWXw9lA/NAY2blXk9ieB8Nt
      hlb13yWpWnx2PxN/sVjkL/79XzI2OYNfMRk89zq9xy+QS8XpUAuI1Hy1jItexCrl8bjdeL1e
      lpeWORuM0heqKpEel8bXDp7isOxnKK+ydPUui7NzWx5HPpkmpHlJpdNA9Z0vLixw9eOPa8Rn
      WRYTo2M8vHWXWGcHc/lU7Xy3w8mA4eLBex8TX1mhbfgAM+l4wz3MSoXA0X7GXWWWFYNbqXly
      +rN1bvw8sS9EoK3AllVdLte+j/x89OgR//TOFcp6iUBbJ45gO07Ng17IEopE8eXn0XwBgh4X
      FhIHB6pixtijEQ6b7mpX9Cf1LZuRKuaxBtvp7u9r2D43N8fK3AIul4u+oUF8fh/FQoFEPEFP
      Xy/FYpGbn14jkrNQBjoIhIKsTs6SyWXpk72kRJl0Kc/pSC+OFu93uZDBe2qIhZsPOBhYqxYx
      l0+hDHSgTiwT8QaYk0oUE2kORzq39K7qrXg7seg9K/ZcBGol/wshahYfoEb4+1nWh+rYR0bH
      uP3ZQ4a62xgZG0c43Aizgub1o3n9uHwBCi4vTn2RwToitiwLX8DP6kyC3khsw9afIbeX+NgC
      I8kUvUcO1nJ4e3p6yEzMMSgcTN96wPBrL+H2eOh2u5keHacwOkuf6iRnFZl+PEq7w8vBaCdS
      sCrUOIp5Ol2+lsQP0O4J8ODKTfqCjWmTprDwai6QFWRJwkhlqUhb6/5p6wBbqe6wVWxXl9jz
      NqnNsEWeL2r7oKHBAfoP9PH//ulfgC+KN9SGOxBG865Jzw7Nw3JGXVcZOtbRzryuk80WNq2C
      FvUG8OcrPLh8lUOXzuMPPLm2JFEo66RW4+RyOVwuFw8/vUmsLNfs7zF/iMEW17Tl/s1wrKNv
      3TZLVejo6uL+3VFCHh+pdJrOQOsiWOvObfKA74YivN3z94X9sDkxRlXVLyTx28nvK6txDKcf
      X7SLUGdfA/HbsIRoqFZgf3xvwM9qfuNSfjacqsrxYCdzI+PV61kWZr7IolLmld/7Dn6/n1s/
      fY8OQyXqC+7ugz7BUjpJ5MgAU6NjdLqrVq3jXf3MZOJMrjzdhLtZ7vfnhT3vFN/qoffKS7sb
      KBaLfHz7Ae5IB4rq2PCjqpq31kMM1j7+wsgkfU9KAo4sz5EqbN6QwkyvhYPImhNX3iCVSJLJ
      ZOhwBwi3YL7dgGlZpJ0WsY52CjPLtRVLczq52H+EgdjmOsALHQtko/4l2DOgqqpbzu/dKBEb
      WOe2/zwghOBXV65iRYfwlHWEWQ3Sm354g1QyRcfBc3TEqmZCpzfIcmKFQCDQoPw5FQVZqs5L
      3cEotzMLRMo5erUgPq2xZo9pWThCfiqVSjU+qi1ER8pk9uodhGnR39bBbmMyuUxcMnj08CHf
      +8M/4P7H1+h1bZ/J9sru34w9Y4B6+ddWhlwu16bNDOph5wYUi8WGekB2/ZlSqQRUQys+rxdt
      WRaPRkaJHm0jsTRLz+EzrEyPEDtwGKN0g0KhQLlcHY9RyBDtDqxbAfy9HSQWskR9AbwujU5J
      w3vwABWXxsTkLHJBp9cfJVPMk3IKeg4e5c7P3kdyqFQki15/JwOR3Sd8G93+MEYhxcnDR5l5
      NMJhNVQLetsO9gPxwz4wg9pBbXZJw62+GMuySKWqNms7PLpVwzW3271r1c42gxCC8YkpLo/G
      qRhlvOE2nG4fej7D9Z/9FYOXfoeurnYkSSKfXMbUCwz44fSxxngfy7KY+fg2Jzr6arrBSi6N
      80Q/HZ2dmKbJ1NQUgUAAs2yQuDPCYLidfKlItlSkMxR57s/664Q97RTv8/kaVoHtzAqmaTb0
      BbPbZDZfo1gsIsvy5xL6/HBylmDHIVZnx9E8fiRZxhMIE4h1kloYx+Pz4XUIuh1FvvbGy0A1
      Tqi+bGIqlcIpGvumWUKgPDFPKorC0NAQhUKBhZu3GHxi3fFqbrza82f0vUK9yJTNxPlsep7z
      x0+STS0xkyxyemhgZwUWdnugW4EkSbhcLhwOB4qiNJTR2yrqk2maA+uaA+qeN4QQJBJJ5uNZ
      KmUdq2I0pBueefN3OfnyV4iE/LisEl979cKGjTxKxWIt68pezVyqA2FapFMpbvzqQzLpNJqm
      UXR8vmLEXimukiRRKBQoFotYloVuSpwd6uHnVz8hmddx5Wd5sJLDsqxapPBWsWdWoN3o5GKX
      RbdRb1WyVwO7L+/zhGEYvHP5CpHhM1TKOk5tYxOu09Jrz25nvtleboBoWxsrhWzDOT6nRioe
      xyiX6bSc3P7xezz49CarpRz6DtoG7RQ7lduflXHqzcSVSgVNEfzkww/p6uxCtUqMZGWGgtUV
      3s6w2yr2TAR6VgawiRuqYkSzS12SqvVCn7cH2bIs3rt2D6vzOKqiYOhFDL3Q8lghLHxed61Y
      rO0HgGqpx0qlgsvlQgQ9mJZVawWqKDLWTJw0Eq7hTtoNnX68DIe3Hhi3l9iN92+Lu5IkMT4z
      RSQcI5la5YN7n3Ls4AkKFYGqbN/yt2dKMLArM7NhGA15xLCmUD/vmKF8Ps/c/Dzv3J5AL+Tw
      tnXj8QdxaF4cTZ5cIQSFxQl++9UTeDxustlsy0rYkiRx/8qnnG87UNtm6wKJXIZVodOmuAlv
      wXP7ImK78UR7wgDPwwZsZ11ZllVLoH+e0HWdP//BX5GsONC8fmKDJ0gtzdI+cJj04hTBzrVG
      E6ZRRqyM8r03XkFVVUqlUq3qBTR+NJ/Px8LMLNbEEl3+xlo6n3f1i/1iq98utvPO9kWj7N26
      pq1QP2+Uy2V++I9vs5LVOfz6t6rPU0cslTqrjhAWxCf5/W+9gSzLZLNZ5ubmGqpc2OIPwMLC
      AuFwmBmXRbtVZZBMsUCpYtDu3zykYbcJ9otI/ECtw/xWsL/jip8zbFl8O57nVCrNX/7tDykq
      foYuvrUW1Vp3XLRvrdNhfnmG7144UZuVhBD4fD48Hg+5XA5Zlmv1Tf1+f63TpZwpobRVP+L1
      8YcYkuBC/2Eim4Q2bBRh+yLClgiehheaAWD7yvgP/uaHlBxBOg+dYmHiIalkivbhM3S2RzDN
      9fWJApqDSDjUcD+Pp9qV0e/3I4TA4/Egy3ItAvbR9ducetJCSAhBWyBEKqBSsRpDpDci9C8C
      8T9vJt2qHrAvokH3Ctv9AKZp4ox003fqEg63l55Dp/F7nbXqdKrThd4UvOak3HCfVvqJHRsP
      MDk2jsiXGKdAXq+Gcwx1dDPU3Ucx4Ny0NuZ+CTDbCp43k271XbzQK8BG0aj28tlqdSgXsiyO
      3UNRHaSSK3g7DtPd3Y5pmlSMMpIkoz8JZ3Z5A3jcjT4B23HXfG/TNJmemMQfL+Jqb+PYxfNM
      Ph6F5QJORWXsxl2CbRH6oxsXsfq8Z/6dzOLPOvPv9srxQq8AG+HatU+5fv36utsr1BoAACAA
      SURBVO2yLCNKOTz+IOHOaqxOZmmSTK5Y9WrLCg5Nw6F5kRUHQggWCoJPbtyqWX1aeb5tj/aD
      O3fxOTVCOqSSSWLdnaT1Ag5F5Y0jpzkd6Wk53t1wNO0EOyHEjSacz+v8ddfbCzPofoZlWbz7
      zjucPnNmXad0IQQ//fkvebxSpO/kK7WPYRo6kqywPPmYzuH1JUxKmTivD4dpb4uiKAqVSqVW
      +7TeUWcYBu//+Od0Km5WjAJRl5fhcEfNIQZ7kzf764wXWgRqhhCCXC7HG2++2dIyJEkSyDJu
      f6hhJlqZfIQn3I4nGKZcyqOozqpZVFGQZYVyIYtDjdWu6XQ6a2UgC4UCQlR7a33041/wSucg
      iqxwcINiX7tJ/PuZmTYSdVrlgDwLvhSBWHOWPH78mB/96J82NYt2tbeh1L01I59iMOYjM/0A
      LAvn6mOKKzOUcmnyyRVyiWWicpFY21rhKF3Xa8Fd5XIZXdeZm5uj3xvBqToaZvxmJPNZrox8
      9uwPzf62Fm00to30tp3ihV4BhBBMT00RDIV4/2c/opBOcvE3vrvpOZG2GL5cNVqzohc52e7k
      2PAlTCGxWtQpyx7MSgVFWBjFAi/1+Tl76s2GCNVyudzQ7dz+31MXurHR7LycSeHojhAvZom6
      dzfdca/9B3tx/xd2BdB1nUwmw9/81Q/44PL7xEfvEm7vZHBwaFOxoK+7i0t9bjy5OU6GTY4N
      DyCEoN2n4vBHcHYfoZBN4Q23o7pc9HV3kk6nmZicBNYKe7nd1aC4RCKBruvkMlmW009vIHGk
      q49wEWTx7ISyWbf1/Y7dGusLqwRblsWVKx9y/949cstzRJ0mZSGjyhLn3/o+p1+6sKXrrK4s
      8auf/ymvff1f8c79BbyxNTNlKbXM14/E+ODWI75y9gidHR3ouk4+n8fv91MulymVStXwiKlp
      jstB3M7W32KvZ+fnje08n+032ah20nb0hBd2BZBlmWAwxKtf+SqFko5blYm4JFyqzIHB4S1c
      weKv//T/4P/8X/+YfLlCJBKhL+RqWD3Sq4skkklODHTS2VHN07VDoHO5XK3TfSAQINbVSSKf
      bXkn+GLNzjvBdol/szCH7egJL7QOcOLECS6//z4lU1CqWDgVCe/ACULhrXRPlPFpC/SEdIzi
      FPlchp6Qm7n5BC5/iFImCdlVhofeqIV9CyEYH5/kk/uTuFQZVej0dndx4thhotEojx+M0y2i
      v/bE/izY7TKKLzQDyLKM3+/HRCFTFngdYC1NMzM5Tt/A0FPPFxasFBSG/Sd4dP9jPr7yHp2X
      /jMc2UXePNlP4NVD6zLWfnV7irGkQjGzwszUOIeOy4zOrjDsy9FmzfLRgzsEfd0MdJzA63r2
      HN/9bOpsxlbG+rTJoWKaJEp52r2BTY+z8cKKQIZhsLi4SCmX4a1vvUU4HMbvVHCVs9z+8N2n
      ni+EoGj1E4p1kVx+wMToDQ4dHOBgWKE/olEs5NaZUy3LIuqyMItpNH8bPr8fSXHyaGKes/5l
      jnZ5eOOYm2Odq8yuTu/Kc8qyvGv1kebjS1x7/HPuT3/K1PLELoxuDVsVW552zHwuSUbaetPE
      F3YFSKfT/Phv/hxfKYGr/yTe9l4K6QTO7BKZxWlmpibp6x/Y8HxJkvCG+3DMncbT1UvFyCAc
      Pbhlk2NHj2GaJqlEnJlP/4FUKs3xb/7HXP77t3mj7yBntTz/+uo9VmfHcahu/sfXCw1Fr2RZ
      omKWnvkZJUl6pm6YQggWk8usZmaRpSxRb45Lh1xAinuzGUyrf53PwhQWqqzs6J5bCV9urqe6
      br9PQ07nYYuVNV84K5BlWaTTaQzD4NoH71IqFugdPMhLr7zK+MgjPv3Hv0BTJcqofO8//29r
      fciaIYRgZXmF+z+/iSRJrMhpgpKXZCrJwLlhnJlxvHPv0yEtY1gSM0UviqVTqCiA4LNiF7et
      k1wILvE7JzUUs8TfXZngX7x1CoCpVQtNu0jUH2p5/63AnlW3k0k2uTxLppDCIecQYpmwF/qi
      60Wx+7NFZuISPk8XQ53DICwmFq/icPZzbvDEjsa6HaZppQini3mMoXaKn03SF4m1PK/Z2vRC
      rgC2JeHim99ElmVCoRBLi4tUhK1kSViVMiMPPuPCpddq5wkhePz4MYvT02RWcpR1g6DsoyvU
      ToccQ5Ikej2d3L3yDt8OX8F+z4owySxN09Xupz9cFYt8znm+3hulM+xGkuDK3RmCmlJzjHUF
      Le7OvIfm+PaO6/3spOT45NI4Xz1cQHMqCKFtKHIc73VzrBemVhYYnVvlQFuF1w67mFqdJ5nv
      JezdXkHe7Y7TJmT7PMM0yce8TNy+y6uxVvWvq2h+nhdOB5AkqSab1xPI3Tu3ufYPf8bD+3d4
      OJPEIQz+9//pf+HDjz+oHTM3M8MnP/kJF1MJnNkiJ2OH6Yt2oyprMf6yLNPmrCBJa6HPZcNk
      uCfA9ZGV2rUiDp1ssVoSpZBOMhEv8HBigVSpes7YsommncCzSZn03YQdAu7TFB7O52vvyt7X
      ChIwENN4/ahCf1tViuhvg5XkVSob2Oh3c7z13vVZuQSKzCl/B/IW9Z3VTPLFYwC7HImdQ2xX
      oh4YGCCdWCUQjaEAYzMLHO0N8vDKL2u2+8zMNI5igal0BtUVoJBb5u7YJLnMMlduXSWRr8rt
      kvcwJVOqpVwqiuD+6DIlq6p8l8tlRophhrvDKIqCP9LGf/Kd8/ze188Q9VbLPAqrRK5U4t7c
      NRZTy8/9vUiSREEv4dfSnB0IrNtXj6fN1kPtFhNLYy337VQfSRfyLc8VwN3UApVCifBKkcA2
      qmU4VMeLKQLZVeU0TUOWZZaWlvjw5z8iUSiTzaQoW0WCmmB+Mc7Z3/9XaJrG+Pg4jz76iG/1
      9fFhvMhAX4xb969jlF3cSc3zypnzfHLvDpdOn8ehetCLMkFndaVJpgoYihNFNlGdTmTAU9S5
      OrWELyQQFQlTV/HIDh4vZLEsgRko0Bu8Q8gv89nDVTqC39myJae540oqn2V0YRRFgrC/gwOx
      rpaz5NjSOFGPgRCbV9V42jg0h4IkxjDMIRxKI4ntxBq1kIxzuSKhpbP0WgbD4QhBj5fHy3Ms
      ixLtgRAHtci2r50r5V88JXgjPLx/j09++TZyPoFlCjSXSjZfou3kRQKhDkYzFYTiQs0lac8U
      MFIr3F/NkUtmGOjq4rWXXubq7U+4dPZVJlZmUdI/4Sux5Q0/SkqXyA0dpKdrTcQxLUE6a1Eo
      CdojCs4npQ9nFiQy8QFeGri0pWepl41nVxcolO5wpEtCAjJFg/HVNjpDhyhXdOLZeUzT4tiB
      08iSxNTyPF3B+4S926/4XI+KafH+IzeWpfPq0TeZWZ2lLdBGaBP7fKlcRlVk1Cam+ensDNbB
      008UX5Plkbv8y+4uFEmmXDHQNggf2QxCCD6euPElAwCsrqzwo7/8ExQEh8+9QsWCtvZO/H4/
      y/NLzF0eY1ot4T9zAafbg/nwLufCPUCF+48nCPlkJpaWMb0hfP1dJIRBIplGevBDvt4rOBrW
      cTQJm9kyLHcOMjTkazmmbCrH2FKRM4djSFKVCcqZUwhL5XDX8Ia9vGzLz1JyiZJhkMtf49SB
      RiV6JaOTyJl4XS56IjJCwKOFEoYp8Dglhjs2Vn63A6NStdJMrRbpi7oZWYQDHW+u02uMSoXL
      0+Ms+8JIQuAq5vleby9OtcqEt2anmBs8heqoZtmV8hl65sfo8/qYzWWxVAc9Lhc9kbZ1Y4Bq
      P+OiUaatrqzMbHyZDEtfMkChUGBpcZFYe3utLdPkxCQDgwN8duMuU5+O4NKrocszepJCXyfR
      fIpzncfWXetucg71zMuAYPTWhwgtRm9PB9bY+7xRepuA84nFwoJJXw+HTjQ2l66vgfmzD0Y4
      fcDHounlzIC/as4UYFnwcFxFE4McCB8j4GlkIDu0enT+V4BOm9+iPdB6Nt9pgN0H1x5z8aXD
      65j6aTAtwZ1pmWjwDEJYdEfaSRfyvL0wj//IWRzOKmNYZoXizBjCrBCUJYouD46u/oaxCssi
      n4rjDbchSRJ6JklgcZKv9R5oUN4nV5e5obqRNA9qcplALk6PP8hyYZHertCXDFAP2wT5zt/9
      jGIyh5k18MmNs2fJ1MkaBTw+Lx3RdsK+NTt9Xi9yT9ZZycYR7naGDh3ENCq4pt6l15yimE3i
      1DysrKxy6EKU9sjaLG7nDFeZwOK9yyMU9Aqnzh/kQMSFZVk4HI6aE6hsCB4/GuJ8k1gkSRJl
      w2By6Wcc6342MaZcLuN4MuvamJqY4fJnq/z+d8/iltdkersi39NgWoJErsyNKUg7+zEPHMUX
      ad+dFUcvUZmfIGwZGEisyCruti7cT3wpmdVFjpceoTkUtCfxWS+kEtwMy7L46Y9+TG48gSfk
      J5fOEhV+kNe/Hk1xoSkucvkCRrCxMrPHqdGZToCcxysvw0yetuxdXu13IUkBZuMO0sUKcjhM
      LLxWcSJXMLk7IRjskuiMqIBAWDLhgIds0cLpdK6zgJiWQFPXgvZsx5AQgmQ+g6YawLMxgL2a
      2CuFZej8w9VRFBNmVrIcavfVzKebeWfrocgSq1mTSKwbQzcxvIFdIX4Ah0vDMXgM24de3ypE
      CIGcnCEYbRTvvlwBnuCTj64yce0x3rITTa2+j1R6hcVMnsO9/cwvTiKcfvqiVTlzOR+nu68X
      l8OFz1UVnZbSKwSPtTN8aPiJp3iZmU//Ab+ic39kDFXx8i++eZTrUxneTjmIuE2CDoOHuQCZ
      hAcFP6/3jvGdc5vHsmRyJrPzftq1V+iJdAHrPanXR6/QHUzQ17bxt92pCHT/wQzDR/pw7cCI
      XipXuLYUpLe9HQE8XkyTdLXhHTiDrOwshGIrEEKQvfsuXhXKshO3bHGizfUlA9Qjl8vx3s/f
      xRrL4ZKd5Ep5hJ5iJg8HIhEmpz5j6NDLKHKZ8EvddPf2kMvnmJ+Zp1Qs0NffR2d3Nx6PByEE
      Nz96lzci8+iFHLdmkhRTBhfO9PE/T3jIOZwYpozmdpKYnsIbaMOd8RGU0/xX35jHvQF1pXKC
      z8ajtDkOcbpv84jVxdQyinWNrrCDZKFCQFOQpeeXW7BZOMPjhQKmZeJUJJbNLrra1hTWfEnn
      lugl2L2xB7eeWcfvXiW1ukj7yW/Q0+Zr1A22wNRCCEyjDKMffCkC1cPn8/G1t77O5ewvqSyV
      EOUS10ZGODR8lmx6icWczpBRJukrcP7QMIvz8+SzWfL3bnN8NYF+6yZ3+roJDHVDdp75qVly
      59pYXUmRzea4M7JKPNRB0dNOcvQhFS2Khwx42lmcHKcvMkBZr/DBXYvB4RMszdzm0kkHwrJY
      yTiQApcI9B3DNX+bI7GNC2TZ8Dg93JwoU2w7TduZc8wmVjGnrzDkbd161RZjtluF2o42bSY+
      +zqmJVjSQ3S1d6IbFbq0xgnXq7nQVuaB1gxgOyJVtdpcvGfoCIvziwQ8zlqHTLvG62bEL4Qg
      MTeJJztLwMyio37JAM3w+Xwcfu0kd/7+I+KZJLFwhFwxg6WXCLgdmIoDf9HJJ3/6Z3SnU2im
      xStCIEsSlbLB5NQ0XT1ZVko6v3ehnflkiazk51axg6nwIaalEMgKkb5eVlaL6Okyge4QhaUp
      ZD3L759Po0Ve5swrv8PM9Mtcu/0L2j2TxKXX+fqpt9B1nYDiWudgaoZuGCzqOY58/T9iYLBK
      WKFwmLHxX647NleqMLJicL7fu23it82uG6UnAswmSkRC3aiKgrpBLVYdBxvJIfWKuCzL3Lz6
      AWde/xaaqzEEZTMIIciuzPGSPIO/U4Mnd/uSAVogEAxQMHSG+4+03J8vy0RWE/RIFnfmpph2
      BDjic3DV7WYKF8v3U5wf8PEg7cXl7cDlzGKJLK62QxhLU9CnsjQ6Sjxe5sCRXubv3EJxelA6
      vfzwsxL/w3/xJrIsE4600dEeoMfjYOHRNX74gxE8dPDm4ImnfvA5PcOJt15HURQsy2Lk5mUq
      C3dxUsL++JNJQVbrw99znGh7nrmFq3R5t8cAm1VhnlwpsZxXyZVdxGKby/Yeq0Bi5CaG7CDY
      2Y9WVwW7+VmjsTYmPrtB//EL+L0bi++p2TFklwaWRWj5LkcCGv5Ao9n4SwZogVQ8SdDZ2kEF
      4FKcZIUg7XSg9fVRXkrhc7ppd6sM/OYfcaQ3TOr+LzC9PfQcPY8kSfjmfslyTkaVOzFGZ+k8
      epquJ0F5vo4eqFQQwL/81lcIh6pmu0AgSOfg6yzPufnqd7+B3x8gk04z/dlj2nVHrTt7Mwyz
      ghX01GqbPr5/h9zUTc52K1A3z2a1A/SfeaPWSjbbe5Dxaz9kyLNxbnIrbCT3G6ZJqO0Q7Y6n
      k9nZDg9gAAbTi58yIcUI9R9DabHSDZ96ukfcNCt05kZplzRAItDb2kn2QjKAEIJ4IsGjqQX8
      ThlFVYlFw5RKJcKhEKuLKzVLkA1TWOSMAi7ZgVNxUjh2jsCb5/HJBj/5N/8WWZZZ+WyUUycf
      0HPxD3HJv8HjD/6WlUAb0c4+XHK17j+qRtTfzrlomJl8joplcbbvAJ2hECPzc5w4dqxBju3o
      7KWjc03eDwSDBF57mdmxCUZuPKA7GKY92JjD7FBU9OlZMocyBIIBjp48y8PUJDCz7l3YdUkL
      hQJOlwtt+Gvcu/UPT2z6Fg4ZhkLr289uBTG/g9Fsjrbw9nIaDkR8dBgZPp0fJ9R3+OkntIAw
      TZJlmYOezUPJX0gGWFld5e1rYwS7B1ixZIRucedxEtWpUR6fJreYw21k0AwLVVbxu7x4j0b5
      6le/zfjIGMmlON/45uvIWPzFn/8Zua52kkvLXOw9gPP6DeYvXqR3cJD8y9/n7bd/xLlzL/GV
      V86S++A2QnEyl1I4emCAb3R1NCR5Hz92bMv9CnqHB8mYFv/fTz+mkC3gS81w+sg5Lgz0EPEF
      qm7/OpoNDZ3n0e1FhgI6jrrSdqZp1hp1OBwOfP4A3q/+cU2p1UslHl7/W461N94/XTCI5ypE
      vAoT0jBaeRXF0hGqB6lSQKOMQzIxdhgW7XI46MgsMD/nwOFyo/lDIAQCgdPlbvD2NjOnXsyj
      Tl3jQu/T84JfSDOoYRj8Pz/4D0QOnwdh4fKsr7AmhEUxk8Io5jHm5zlxrJtXL55vOGbs8Sg3
      fvYx3/1Pv8/jd98l+P4HuIDEQD9d//yfEQyFcDqdLC0tUSgU0HWdRDLFg/F5fvutr9Y8p6VS
      iVKpRG9vb0PjQCFErXWSLMstmWNufoH/7d9foVLOsRzP0hkJ8McH2zhzYJBJK8fRVy/UCGRu
      epLVW/8IWoh+V4IJq5/w4FlKpRIejwfDMAjXVcSwQzNGr/4T5yOZ2nUyRYMxa5ADJ19jZmqC
      vv4BHA4nqqricrmqz5mI89HP/5HzBweR5Z2VULeEoFIxyZd08iX9CVPCsuUm7+8l2NWPJMlk
      E8so8Qm8Zh5JVvBLZfraglvLMX4RGUAIwfz8PKvxOBNzS9B9mnIuwaNHjzCFwtmXL9aOrRhl
      HMUEb5zsJxxqzHJKxBNcee8DfusPfgeAx796n+LbPyZiWaSEIPvGV7n0W7+FLMuUSiVmZ2cJ
      h8OsrKwwOj7FarbMQGeQ+4/H+IPf/U08bjeaptXSGPP5fEMnSZfLhcvlamCE5eVl/t1/+BVL
      8QRTcZO2oBuhZ2nPLyBCB/jt3/0aL5+tVqxOpVI1r/KDT35JoVii58h5Qk90jng8Xs1P8PtR
      VbW2Oi0vLaJNvE1XyMlSXmbZcxxPuBNN02rn1mdoLS8vMfvgDt0BDc35bN7ojaAbBgvxNPGK
      k6GQg7BvZ1lzLyQDQDUpvlwu85NPH+JqH6zakvUsn179lEtvfANJkqgUs5yOShwaHmw5+77/
      13+NefsOL//3/x0+f3UVSSQSXP+TP2VwfgFZCGZ6ujn5R3+EOxhgeWGGf/1//Vv08EmcmsaB
      IAx0R/BoLl6/eBan01nrhm6HFzQv8UKI2nYbVkXnx2+/Tb4soYViXBvLIKwyK1nBkd4Q/+X3
      L9HbU/UY53K5avDYE9t6q6yvdDpdI2yomiFXlpcYu3sVb7QHXzBCKBQim83idrsJBoPMTE8j
      yRIz928R9rjoCO1u3dLnhRdSB7AztTKZDEJxIssyenaVG9du8fIT4heWycGA4OjhQ2RzOZaW
      lpFliaHBNWdNKBisztB1BBqJRPiN/+a/5ubf/i3Wzdt0fufbfHb5Mme/822u3Rsj7YjhVpx8
      7bCHjlgUv9/Hgb4+yuVyrc+xnbbZ3EbVJtLm/sKy6uKt7/wmqVSKQqHA7fEEZUkGKpRNQaG4
      1ri7mfhbWXBsRnS7q7NquVzGHwgydOoSi4uLlMtllpeXicVi+Hw+rn98hZAoUDYqHOn6YhT2
      sixBypRfvJRIqHoWLcsinkzh9EerlpByHo/Xy/jIY2RZxihkGO7tJB6Pk0pnqIhG4gcoFIuk
      otFaWqUNWZY58/3vY3g9VJaWeOMP/zlut5uCboFpoOMinc0zNDjAweFhPrl2vcGWbpomo6Oj
      FAoFkskk8/PzZDIZEokE2Wy2pQ/A6/UiSRLX740RleIEjXmChXFiXsHhg8M1h5XT6az93dxv
      zP5nh4Wn0+naClQsFhFCcOjQIbq7u2lra0PXdZaWFpEKSSJ+L52Rrcnde41kQWdVF5z+6m98
      cVaAVn21dgqHw7GuVZG/fYiX2tdia1RZJlso4Pe46euJtrzOS9/5DrKi1JTZSqVCPpfD5XJx
      5/Ztkm6NU+fP1+557ECYd34xRy6Z5HapA6/7Kt/79jeJhsMNIpYsy3R1dZHNZnG5XDidTgzD
      wOl0kk6nCQQCDcTrdFbziFVV5fe+93VSqTShUJD7I1N0tDU287DDBeweBZIkNZR+sa+raRou
      l4tMpqr82i1cVVXFMAwMwyAarb6X1HIP6XyCoPfZK9l9HpCD7Zw9e76qb30RdQC719ZOIYQg
      nU5z894D4loPqrNxBq8Us/RrJV4+8/T6NjZjAtz55BOSf/f3uIWgcvQoh976Ju29azb81dVV
      fvjTD7g3bxAuT3F4uJ+h/j78AT+ay0UkshbAu1k3SPu+ti5QKpWoVCrkcjlisVhDXL7T6UTT
      tNo2IQTT09NYlkUgEMAwDAqFqohkM0L96lAsFslkMrjdbkzTRJblGiP4fD7y+TyVSoWJezcZ
      imyxGtUeo1ypsJgzOPXqm19MBnhW2ObFZCrFjcczlPy9lAtZiuk4TlXhXH+EowcHa0kqlmVh
      GEatc6TdzDqTyeDxeHA4HHg8HiqVCqVCgYkf/wQpGOTsb/3muntPz8zxf//Vz3jj7CD9vd2M
      jo4yPDxEuVymr6+vJnI4HI6arG6bQPP5PMVisVbXyDTN2lgikQjZbLbljG73ILaJV9f19fkF
      T3Qil8tV62NcLpcpl8t4vd4ao9grQ6FQYGVlpTa+2fFRujSxq6vA8ywJny+V0Svmi8kA9cjl
      87z36V0unTxE25M2RkIIDMOgWCzW7PD1sGfIZDJJJBJBVVX8/jWrh/3hNvp46XSGZDJBf38/
      iUQCTdNYWloinkhy7uwZgJqoYZpmzTcwMjJCNBptsAJls9navSVJIplMPin9vr4wVfOqUm+6
      tMeaSqVqFp5KpUIwGGypcySTyZpoZluMbn18mZhSweV01BhvpwRsGwSSs+N8Mp/nyIEeNIrM
      ryRw+mKcO9y3o+vWI57Jv5hKcD00l4vXTh/G7dbI5XLE43HS6TTZbLaWItnqI9YXZbIJFdaq
      zm324YPBAKrDwZ/82Q/4+5++z/jEJIqicOH8S7WSLTYKhQKVSgVJkojFYpvGvgshCAQCLZl2
      oypxzdsMwyAej9cq5jWfbx+vqipOpxO3200qlQLg9CtfYbrs5JPJ1VoQ3k5hp4BWVDce2SSR
      ThEKBFhcWMTj81EqlWor5E5QrlQIDh1/sVcAIUStUYU9y9mijd/vbyD+5rS/fL5aPc1ud+R2
      u7c925VKJXK5HIFAoMEDbKNSqWCaJi6XC9M0GRkZaWjdms/nURQFt9u9VgMolcLv99d0pFZx
      +vXJ9/XbdV2vhlsHArXjmlcK+7h8Pk8kEqFYLPLu1duovjASAnwxrHKJttW7DLT5txSm3Oq9
      2cXLEskEHl+Aj27c4vThQ0SDGpfvjPPaqcO1NrM7QdmoUPJGvzhWoN1GpVKpdWms/7gbiQbN
      DiPTNOno6Khdw+FwbNpdshU0TVtnQq1H/WqQyWRqf+u6TrFYxO/3k06n0XWdSqVSI7ZCodBg
      KbKfJZVK1ZRmt9uN0+nE6/XWntM0zQYPsP28ze8kkUjQ3r4WHOT1upG7DtadF8RYube1UIQN
      jrEJuyPWxr2Ho3zllVcw8knujS/y5oXTqNsMr2iG06GilJK/niuAvfRuNPvUnGAbfOh0Oo3P
      51tHDM1MkEwma7EzqVSqJqLYfYCb728zHVRXjq1asoQQXL9+HZ/Ph8vlQlVVKpUKgUAAXddR
      FIV0Ol1T0J3OqnPP5/M1zPTlchnLsmqrjhACl2utrVO5XAZoSMJvSCCXJFKpFB6Pp3aMEIKR
      yVnGcipaIFL1oeglUiM3+HqPuuVk+b3Cr+UK8LSXXiqVGuRZ+yNns1lKpWpNgXribPbE2qg3
      A9rBZEDNZu/zreUUCCHIZrM1s2k6na7N6Iqi4PV6G461TY2SJFEqlVBVlba2NvL5fM0ylc1m
      cTqrQWi2Td5mAntlqhet6ht1N4dT2PtzuVzNWVa/3zTNmmJcn6ElSRIHumKMXn+AEn6iowiL
      A0oGWW4dg79fUCjpv54MsBnqlValqQpBsVikra2tgThaeUzrTZWlUglZltfJ8OVyuTYru93u
      BsXYPj+Xy/Fv/t3bFCQvHQEnpw920RX18c6NcRbiec4NxwgHvRRyWc4eG6yVPvH5fDUGLZVK
      ZDKZmtxuK+4Oh2MdA9Q/Q6vf9kphh0HYv+2m3oFAoLYq1l8jkUighLpq50aYCQAAIABJREFU
      2/7/9r40Ro4zPe+po6uruvrunukZzsk5OBySOkhRFKVdSvLuytrIXtsBvPvLBmzEWMC/AiTI
      H2MRxD/zKwlg5EIcAwmcAA682CzgWPIaWq1EaVfS6iAl3seQnLNn+r6ruroqP3reb76urp5D
      4nA4w3mAwcx0VVd9Xf293/cez/u+iqZjFSHEyzXEgzu3jR4VAqr/yRMAYMNTwxt1jUYDicQG
      j6VXrRve+wO0JzpNPl5YKIZgWRZrjM3nzbZ1cQOGGAR8IaQbwM++zANODhB8gBLFxw9MCEIT
      vlYFp6bbBjH9kPAqigJFUZjxS7uKaZqoVCqIRqOMXOcen9dnM00TsVisY9er1Wpsh6HPSYzV
      RqOBS/fWEBw71XE8cvICbq0tQLn/OeKRIIbD/p75wHuJAy8AvL8eaE+MVquFZrOJarXKVmby
      m9OXTispz8h0C4XjOCzARP/zv4GN1ZWux5/j9/vhkxxY/IrK0xaaBTiCDFNUkckVoWkaszl4
      3d5xHOa7B8CCY0ePHoWmabAsC6VSqeO59CLCWZbFKBJUcSEej8NxHOba5J/DpRt3oY+c8Hz2
      guPg5dffgCzLuHP9KpqZRQzEtmaJ1g0TC7kyGi3g+EAUPnn3BOfACYBlWVhYWEAmX8BTJ2ZR
      rzdw7959xGIx1Ot1puPXajVEIp3kLX5rv3HjBgYGBuA4DnOTEldfkiS26iuKwlbkzeIFQKfq
      0VabfPCJDhrwVhEsOYQ4smiIEqanjsLPqTP8Ck1CSmMCNlQwokH4fD5mo7jHxX/2ZDKJ5eVl
      yLLczhNejy63Wi00Gg3mtZIkCXfuL6ASOAJ/D5tL8Cm4cvsenp6ZxNTsSZSKw7j5+UdI+kWE
      1yPGtu1grVBCLKTDr/gwn6tiXh5AcOY8yvkMPr59EdODSfSFd4dmceC8QJZlIZPJtDnsmSyO
      DA5AkiQWrCHUarUO7g2BJqllWexauq5DVVWm8/t8PqZb8zaA26du2zZM00QwGIRhGCyZhac1
      //u//hnKaO8+LbOGpi12uEZVp4rvnh3FS88/yzg7BF5ge/nTA4EAVFWFbdvMfep+P78rkW1i
      mibq9Tp8Ph8ikQjy+TyCwSDy+TweZCqomC1ATyAQ6++6Jw/bbsFYvY+kz4TqkzA5MYH0yjKa
      jSpu3VuE0Wzh2698A6urq7hy5SqUyXPwh9oqmN2yUF+5g1ODQZhLt5EIbb/5xXZx4HYAWZYx
      MDAAAEgkEsztR9x2Qq1WQ7FYRCgU6lJrADC26PDwcMcEIdoxwWv1dxwHmUyGZYLRSlyr1ZBM
      JrtiDO1rCMgt3kJL7cfA4CA7XoeG0Lr7k7rLeO1avYJWtVoNAmwUSjWk+pOQZZntaD6fD/V6
      vSMPgd9VhoaG2H3ombZsG8V0A6Hh7SWri6IEbWACVQBl28b8pVtIqEA8qEFUdcihID6/1U7W
      l/qPQg23G10YlSKGlSpSx4YQj8fwydwNJB5yjs3N5ezBEwAejuMwN6VlWSgWi8wVqOs6/H4/
      yuUyfD4fExB+spNguFdWnppNurEbIyMj7H21Wo1dv6uAlEMJOg5CiUFkio2OCSoIIi5evofn
      njkBTdOYr57GSZwl6nhj2zYKhQJiHMX6+pUr+PFbP8ef/ct/zuIIdB65asluIFuFZ4by9wuH
      QhjQllEw6vDtsJG3KIoIDM2gDuCe0UBdqeOI30TaFBAZOQZ+fouNAo7PTLSjwbkcFHx1WoUX
      HMfB2OzTB18AiBfjOA5TBwg0gck24G0Ccjl6cYH4/3VdRy6XQywW69hJaKKTp4YmFr3GVmkB
      6z3BLKwu3kau1ESyf6CDDzSXtXD91l2cmJmC3+/viF77fD4sLCywABz56avVKiPJDQyPYnG1
      CtM0WeCrWCwim80iHo+zqCt5gcj45z9PqVRin+HZ2Wm8feku0N+7lif/HXipZj6/CkXTEQ8H
      kJBk5ItzyBVK8A2dgCBKGAqKzPa4/dmHmOrfftfJXvckWK0WlkoGzjx79OAKAK3+PO+FwP8t
      SRIikQjjAFECCk189/vc1xMEAYlEgq2mfAdKL+Fx3x9YD9yJCoZnX4JnxU/Rh5++dwVTR0cR
      CARg2zYjyDWbTUxOTnat1PS34zi4de0yhiIWFlYyGMZGUEvTNFSrVaiqytS4Xvagruu4ceMm
      Prp6B6oeRksJsRJbvFfIqORw+/p1BGIDGDs6vmlQUtZCsFHCsfERLC2vYCFTQsBooL56H+fO
      zmy4mh1gKVfEUGJ79YV6OSMEQUDLtpE2RLz4+vfg8x3gJnl8ji2l8/HRVgKfXxsOhxlNQtd1
      z6CP16SuVqssy6xUKrGc40AgANM0Ge+GsNUK5YbjOFjMNzF3fwEz0xMIhUKM17O8vAzLsqDr
      OnN1hsNh5PN5HD9+HAAw+9QZzD51Bo1GA9lslkWXKa2RDHS3fcPD5/NhenoK86V2NYZocpAd
      azabbMcU/SEMj43gytU7GB4dYcLqxXlSgxGsZdYwve5OjvssZNP38b2XTrEdUBRFXHjtDVz7
      8gtU6xnoqh9ms4l8uYa62YQcSUIWBUiNMvoi3tX8VvMl2BAg+TUkJ47jlZn2czFN82AKAAVv
      aAXZjJ7M+/B5F2etVoNpmqzUudf7TdNErVZjkVlBEBiLlNIZVVVFvV5HvV5HIBBg9AbCYERG
      tNVN65UEBy1HQM1oodk0EYlp+Ptf/BqpvnZFBtqNRkbavHjbthGPx9FqtaCqKtvVeKiqypij
      pF6QndBsNrcUTL/fj6jcQi6chCjJyC3cgV8PQw6EmTpWTN/D1RsPcOb8eaaCegbdbBu1YgZK
      qz2u8bEIgnoAH33+padNlexPYfHacnsxaIgYm34GU+vZb7Zt49L770CrN9Awm4iHghBFAaVa
      A7WWgOjESYxPTHZQU4C2C/vAuUGBtmsynU53+MiJfOb+Mmq1WletHQIZmF6R3nK5DFmWmUri
      RRpzpxgSj4eExLZt1Ot19sV4EdDccQSyY6rVKotpeKHXNegYUb4JoVDIkzbhhm3beO+za5gv
      NpHyW1gzJASSG96izPw1LC5locf6MXXsWE+hUssLiCvtXfLUyXbq6fLyMrNlvD772toaVpYW
      EY1EoIfbAh6JRDZYso0GbMfGx+++jYljxzE2dQzh8OaJ+gdyB1BVFalUCtVqtWfEk/FW1rOa
      3Px5OmbbNvL5fIcBzatI/LX491JGF0+RJuoxFbyiaDDgPfl5uKPMVLmBhIAX9s3gOA4LbhF4
      22UriKKIV547CcMwIMsy/vbdSx3HkyOzSI5s3Mvr89QKazgxksSxo6Mdrw8MDKBarTJPFwC2
      m964PYdffnEPP/jui+jva5PsarUacrkcBgYGEA6HIYoi6vU6JEWFDQGRyNY2w4EUAILXxAQ2
      SnqT2uLOXOINSqrGls/nUavVWPpjL6Oah+KK3JKxGAqF2O5CQrWZoPIGNakUtBuQi5f/rDxa
      rRbq9TrjEMmyDF3X2W4oSdKWjSW8QN4kyzTQa9/wuqZSWcK3Tk8iHOp26guCAF3XYVkW+04c
      x8H//n/vY6nqhyPG8Zc//gX+1T/7XRbPCAQCCAQCTJX99L23cTyhwcD2Wi093mTtrwF3d0MC
      ufhoAlByOe+aJAEhOI6DWCwGRVEQDoc9J6v7PW6hcgeoaBx0jF/he63i5KbM5/PsenwmmnvM
      hUKBMTuJyckH/mRZ7pnzux0IgoCI3juhxz12ubyM75w94Tn5+WvyzopyuYJsxQJkFYIoQQtG
      cOX6LXzy+Rf48PJtFs+gZxaK96EsBzF98untjWlbo3/MQOU5CF4rjVfHEp6C4Nb5vVyTvBHN
      v79XbIAXIC+9ezNspfoQcrkcFEVBKBRiWWiqqmJ+fh6qqrJ7U0I7qWm2bTODnPR94jZ9HcR1
      H1a28rubBgbEEs6/cHJbrVT5AGQ4HMK52WG8d7MCiCLSa1n85BMVcGw4ooyQfh8np4ahaRqC
      wSCePnuOXWc7auW+3AF4Y7bXapnP51EoFJDP51EsFjuO8Q+YvCE83Cs1RUi3u1JSlpaXIHh9
      KeVymZVdqVarKJVKMAyjQ1en0iyqqiIYDHZ4bRRFYVlafr8foVCIUZr5gFwgEEBfXx/C4fBX
      ymH2QjKstxvO9UCzVkKkmcGLzxzf1uQHNhYv2nEvnD0BfzOLaj6NxXSm3b5WUiAIIhZWCwiH
      w1hYWOjw/G0HlmXtzx2AvnivlRxoTxZFUZi7sNFosGwvipb6/f4OQ5iuS79p8vEqkVepETeI
      au0VcyDQ5KaqC5IkYX5+nq3SpOrouo5wOMxsh2q1yjxGRMLz+/1tisF6Rloul2Npi61WC4Zh
      QNd1BINBjI6O7jhveSuMjQzj0uJVQBnsOtYsrOD8ZBIjQ1M7uqbP52PfnSAIyBcKaAoq9FgY
      WjHXce7VVQd3793HkYEUcrkcK9G+nVjLvhUAQq+cWvcqq6oqDMNAJBLpYm26VwxijYbDYZY7
      6z7fvUPw4N2aXrYCeTWSySQ7FgwGOwxr3gjndx7HaSekU1wjn88jkUggEolAkiSIooiBgQH0
      9/ez1ZaYq736C3xdKIoPsykdN2oWRFc7Ix9aGD7SLRibwa12Au3noyg+rGXmkVm8Cy3Yj1hE
      Q58uwGrZqJQrKKh+JJNJlgW3nd1NVdX9KQBbfThRFDsKySaTSQQCAUZ88wKxNuPxOPOKSJLU
      UXgqn8+3a9WsJ4qQEepOICFvi9dYHcfpSLbnvVBen8vNR0qu99el95ABSCmQAJhXhN/ldhNj
      Q4O49MldBGKpjtdNW2DcpO1ibu4ejh4d73htIJXChdkkPrgpYSj1bRQNCT/45ghmp4+y50g7
      72bdKt0QBGF/CsB2oOs6M2Sz2SwCgQDq9Xq7akGz2VGLh1SeVCrVoQbpuo5KpYKlpSUWXeVX
      UVIxqMICTdT5+Xkkk8mO8D9vgFNpQt7Qdgd9gLaq1Gw2EQwGWQI8qUN0TjgcxvLyMlKpFEuJ
      dNsq/LUpoX47Qa+tQKttMKgjIrXQdB1XJGHHu87c3FyXAIiiiJGBBIbSBTx/6hg+vT7PhJ12
      WYrN7JRiciAFQBAEVkEhk8kgkUjA7/cjsl7PXxAEZLNZVtsmn8+zldU0TaZ6kOEZiURYZQYC
      TWAKSNGDp4oQhmF08V/I9en3+1n5Ev697r9pxyJukTtiTOMlu4H35/P5wxSQ0zRt24bodkCG
      viAIODszjHdv5+HTN+ykwXB3aZjNUK/XoQc7JzF9Vk31Y3YkhhfOPI1nThzDgwcP2DFaAKiO
      kteuC3RHxw+sAADoCFgRJZpKjQDrXU/W1hj3ngSDNzQzmQxSqRRUVWUCwevpvK5Of1cqFcRi
      MZafS6CVqlgsQhDalRcURUE+n4eu61AUBY1Gg5U1kSSJGXNra2sse81tV8iyDEmSUK/XGfuV
      xsqP92Gs+G6QfeI4DlJ9SQRvLsCg7LamCcveWelC27ZxfKazNzN93rd+8SH+4PvfA9DW3aem
      plCtVpFOpxGNRlmRsc3ULf57okj2gRUAACzqWiwWsbq6ynRiCv37/X709fXBtm3kcrmOujl0
      nmEYbBV2Uw3cbk6acLlcjtkNdA4l4ft8PgSDQRSLReTzeYRCIVZ2hPTXUCjEUin5FZy/Hx8h
      DgaDKJVKqNVqTOVwe0F2QwDc1xyOB3Cr0TaG5dIinnn+5I5K2VMVajcMw0C+aiGXyyIWjbCd
      lH/GwWBwy92GngdV6ZBleX/GAXYCMlQTiQRCoRDy+TyjDROPhgxl4pNQuXMydGu1GqLRaE/X
      Gj14IpjFYrEOY4xW51gsxnYXaoFE7NNoNIpYLMYizsFgEIIgsEJVm/GZADA1rVwuo1wud5y/
      m8Ywf5+p8RGgkkEr+wAvn56Bbds79s3zjQEJ8wuLyFohvPnLG13XUlW1i5riBr9b00JGC8qB
      FwAALEBEifCWZSGXy3X59VutVoc3hacOA951Q6nmPun+giCwXNtMJoN8Ps9Ki9AXQTyeRCKB
      TCbDiHFu2jbFH9ypmXx8gv9yg8EgwuEwQqEQ1tbWYJoms1MehTdI0zR897kpvP78ccSiUVYT
      yatadS/4fD5kMpmO15KJBH7z2X7cXCojvbrWdb5XZH4z8MTHJ0IASE0gd2g8Hmd6PcFxHMbZ
      52sBUXVmSnjh4TjtmkPlchnFYpHlDlAsIJlMIhaLMV3eTZMQhHbJ80Kh0NNwi8VirNQhTxDj
      z3N7kiqVCuLxOBP83arPSaodj0AgwHY58kjtZHIGAgG0XDtAMpnAb33nAs5NRvCXf/MWfvXp
      lR3tKgTKhKMFBziAZVG2AlWJoDr45P0BNhJcotEoM0IpiARsuEuJkdloNCAIG2mEtDJT0Vx+
      96AK0u68YUq8sW2blT7nV3dCNptl46LYAc8/ot9kZ9C4vw7ZbTtoNpuenhdg6yLFm+HmzVuo
      NJqYHBtiCUfNZhPvfvARbEfAN1843VXpYzNQLVXKa6YsvSdOAID2BGt3M88hkUiwiUkUBPKs
      eIHq5UiSxGrY0zUJNAnJqG40Gh15vHzgiwhp1I4IAKsCDYCxHSnSK0kS22nImCMDmoSW7stf
      Z7dAnqCHrWIVi0X82//xj6g2WjgzGccf/t63mIMBaD874jsRGo2Gp71TLBYxNze3vkDUMDk5
      gb6+vvZi8iQKwMMC6f7uglXARld20zTRaDQwuF7rB/BOFOH/z+VyHTaBYRhIpVIIBALI5/Os
      T5iiKCiXy4hEIl0TndIfd1P3522U3bjPcnoNf/XTX2GlZOE3TibwT149xyrUAWB2FZWFuXbt
      OmZmZuD3b3inms0mIxv+u//5FqqGgwvTAfzgB98HcIDzAR4FKPBSqVSY96VcLrMGFdRxnVZs
      Am+0uXcQYm0SISwSiSAcDrNV3u/3IxqNIhQKsYZ1fETbcZxHMvn5se8WFucf4I9/+3kEJAs/
      v17GX/yvf2CxnNXFe/i/b/4MAHDnzh20Wi3Mzh5HLpdlsRCyzxzHwZVrN1AXQhACccjh1IZ6
      tquf4ACD56BQIwry6VPLUqrM7KVO8dQIN/jeAABYUdpGo9GRvAN06teU4PKovD7A7grBc8+d
      QTabxR+9cRq6U8b9oog//08/xk/ffBt9R8YBq61anjp1igXBylUD//Dz91GtVpHNZvHxp5dx
      5+5dXPxiAY6kAIKIy3dWsbruTdoXKtB2qK2PErxrslQqMZKc3+9nxhZRncnApWOUxgd01/YE
      2gJVrVZZTEJRFCwtLXXVMSUVqVKpsG422wkGPWw8zAbmXljLZHHj1l0s5Wq4eKsCAHDMKkKN
      OWSW7+FPf/hDnD59mvGy/vat9/Hx3QoiUg0NS0BD0LB4+0scOXYa4voYx8MGXnx6EiFd2x87
      wOM0+YFOtYVWfn4R4V2T1WqVqSj5fB6apmFxcRFLS0tIp9NYWVnB0tISm7jkQpUkCdFoFIqi
      MF3XPQa6hyRJezL5+bHsFvqSCYyNDGJ6KILp5LraqOhYqvnh8+u4fX+BjUFVVUykQnDsFoqI
      wpAjaFkWRL8K0kCdloXvPH8ML559Brdu3dwfAvA4wb0b8T598ogQSYw6xFCZQVKRdF1Hf38/
      8wBRtQjyLK2srKBYLKJYLKJaraJWq6FSqfQc015O/kdx35HhYdybX8bvf+c5yHbbAA6nppCY
      OIuXXzqPpeVl9oyHjgxgVN8oFyP7A5DEjQVrdlDBxNFxlMtlvH89B+lHP/rRv3mYDMHtwMvP
      vV/gZm6SC7NSqaBSqTAPjaZpHcS4UqnE6A/Ui0vTNFaFmmgDxP3p7+9HJBLZCNmvqzskKCRo
      iUTioTI8H1cMpvqQWctAcFpYLDQBQUDDUXD9s1/h4q+/xOzUKBrrLa4gCLg6XwIEAUYli5UH
      t2HZEoIBP77/ygyGho7g1p05fHS3sjdkuJsL1/Hf/vE/49SRZ/A7L/xTxKKxrnP2i4CQbr+6
      uopoNMpC88S5J2GnGkWiKLJopKIoWFlZYRXjyFbQNA3NZrMjl5lqmJZKJUappvd9FXhRhB9n
      RKNRFAoFvHxmCg/WPsdyRQQgYE0eRUorYyWdxq27D/D7v/sGTh0bgyg4uHTjPsRUPyYHvomF
      kgC7vIxkom1LXbmzCFiNvTGCb6Sv4r//8r8AADRLxx+/+EOMDY13nLNfBIBQq9WwsrLC6mQK
      gsCisFQb0x2+dxvBlBQPoKuMH50DgO0e7s7xO8F+EwAehWIR//Fv3sFKRQIEAefGA/iD3/uN
      Td/zzvsfI6orOHnyBNtV//V/+Ou9p0PX5Sr+6wd/gUHfMGaPnMS3z70GYP99MbRqU3YYn/ZI
      fX3dxDqgOxNMVVWW+cWDjxOEQqFNk+43g5tA93WwV4uUAOBf/OHr+D9vfoCPb61BljrbJ/HC
      TV6qF860m/hR3IaiwnuyA1xPX8Vfre8APMSahD/7nT9HKPiQW4E8IuRyOZaUQjTqRCLRQa4j
      9FqBm80mU6t48AJADM/Nusxvha87eR+HHdqyLFz+4ku899FlWL4Ijh6J49svPYOgruPu3D2M
      DA/BarUQXHcy8OMll/Se7wA8WqqFB4v3cXLm1NYnP4Yg3z/FCfx+PyqVCitnzpdG5BNXgM5a
      pY1Gg1Gxvco2Egtzpzx//l48ie6rgHfD7pUgyLKMmWPTMJsWfvLeddzPWbh4+afwyRLqtg8+
      4dcYVKuYHu3HC+eeR6Vcxvj4OBuz3/+Y9QkWbAEB9eE2QnuUKxUlWlCRKyLVUY8wTdNgGEZX
      lhSNj4Jg5Anq6+tjvQ3ovK8z6TbjH30V7PUOALSzyM6fO4vz584inV5FwzCwtJrDl3fTWM1V
      kKtKeOfzeWQLVZyYmcTy6idIp9PoS7YTpPZEAHo9uJQ0hLGRsUdyr90AcVB4odN13bO/sFsd
      EoR2vSCKADebTSwtLcE0Tcb74XN8N0sy2euVea+QSrWLHIyNjuDFs+3XHKfdK6JQKKBcqWJu
      IY1Esg+WZeLKtZt7IwBeyQxhO4Y/+taf7FlA52GAtlW+FSm9TpPc5/OxVky8ISwIQke3SSLD
      ERXajVarxZrheY1jOzgogrLZLk+BRnIaHJ9pd7cslyv44JMvHw8VSLeD+JOX/xTxaHff3v0G
      RVFYoaxetGeKElMOcTQaZZwhN+ga+XyeuVdpJ+BTOt27zHaw3yc+4at8jlAoiNdfPb/3AuDY
      wCtjryGVTG198j4ApQh65RLT31SfiBJYqAOjZVlYW1tDLBZjSS1U/59ymfndwB0E81rRDcPY
      dqnAxxG7bcPtqQA4NvBS6FVcOP3yXg7joYFKnwC96R6tVotxhDRN68ocK5VKbCI3m01WzMrL
      cOZVSVr9eTuBxkPJM/sRuy24eyoAgingwpkL+1rv58GX6yPwE5WEgjoy0mt0jqZpLM/VMAzU
      ajWWc0sVrflnRcWv+Nd4QaBkEL4K3SE6saczzxEdGGbv2vL7CXyFBHfVBvd5Xq+TEDhOu5ap
      4ziIRqNIJBIs95fvEr9ZRJcS/+keOylL8qRhb20A0buTy6PGw9Az+dKJvbwrFMV1G7v0Psuy
      UK1WOxLdyY1K7Vh5Fced9kjlU6h5Bo1hJ9UTnjTsqQD4DAWp/r03fh+GnkluSZ6uDGyUQyfa
      AnlyaDWn8iX1ep21NSJBoZLt4XCYNX8A2sxQygemewBtG8J07ajkXj2EN/ZUAAZCgwdGN5Vl
      mVEheFD5kkqlwlQTYKOejm3brGcX1bokgZRlmdUeovpFgUCgiwLhFRzjc4YPio21G9ibSPD6
      76cGn92L2+8KiPtjGO2KyLyuTxXaqOaQrusse8w0TbRaLZYnzIPvM+w47X4FmxHgyFvE46As
      MLuFPVsahKaIiSOTe3X7hw7StXnfP/9Dag2Bor7UK4Cix2Tgkl1COj/RITaDV4W2rQSAqBtu
      eL12UECOhutXru4RFQLA6fjzGB3aHu9nv4TsqYoDdYABeo+dN7zD4TCrLMHnERiG0aUW9YLj
      OB33pfH0Un/4Nk9eeNyf9U5hmiayaxnkF5bh1E1ELBHjocjeCIDYkPDa6e9u+/z99GVomsa6
      zPC7ATE9+RavPCKRCGuqEQqFWA1LyiXg1SEvGIbBbACeWt3r2ZFh/CTYB+VSCauLy/CtFDER
      CAPaBuN4TwRgdGAMqv+rJ3M8ziBboNFodOwCtm2zNkUEvqygIAi4u3QHN8tfQICIqJPAb77w
      BhMkr8YRvJDxQTF6fTP1Zz8tKl8Xly9+iEkthmgg3HVsTwTgoE5+gjvtkf525wDT6mtZFi5e
      ehe5+AK0eFsFKmWyMAyDlVb3Wqn56xMLlc49dH+24TgOYmoA0UB3jjVwWBpxV+Du/kg/boOT
      doZrN69hLTgPSdtohCHHBdxduN2RV7wZaBehQBvfMO9JhmVZEBobu6db/TwUgF1AL5bmzz54
      k2V7/erzD5DJZDB3fw5XhY+hRDpXa0EEjFY7NTIWi20ZzRVFkfU+03Xd0636JMI0TZjahu3k
      XhT2nA59EEHeF3cD7IZWRb6Qx4OV+1iO38GDtZsAHGiJzqIEju0gkh5Esr/doXK7hqqiKId+
      fxfS6TQ++OzXmH7pNYhC93M8FIBdgCAIkGWZNdBgNoEo4O2bfw/fICCrEmTVW0cn1ejiF79A
      PBbD8NDIoxz+gcLExAReOXvec/IDhyrQrkFVVZhNE/OLDwCsc4I0EdqkBDmwuXEqSiIqQ6vw
      jdqIRrpTHg+xMyh9UbRsb9Ll4Q6wS/D5fKjWK/jl0ju4tzaKmlWB3Nf7fMtoIVLoR9VXBOIW
      7JaDY8FTnhXiDrEzjE9P4vY7H2I8lOg6drgD7CKOjk4goAdQOLIEc7QESe2mQhNChQS+cexV
      +EvtCT9QH8fLT3/rUQ73wEKWZThhbyfCoQDsImRZxnhousslalQruHLxGuZuLKPZbLbbdyp5
      /N2nP0F9OAe7IOLC7KuHbsyHCDmoeS4+hwKwy3hu+hycwkZjZkGT5WCFAAABJ0lEQVQQsHb7
      AWqWALvlsF66ckyAb7IF2ALO9n0DoWB31PIQXx2jkxNYKGW7Xj8UgF1GUA9i2D/O/nccB4Is
      YeTEGGr5Imxno5tMy7TxlP8cnp46ODTxxwV+vx9NX/d0PxSAXUar1cJKeREAWIfy1LGjKN+f
      h56IAusR4lbVwTn9FTx//Pwej/hgwnEcOFa3CnToBdplSJKEYW0C95pXIPnW3Z8FGZNjs7Ds
      JuSchvHwJGZGT2Cgf3BvB3uAce3zyxgORDpeW6oW9keXyP2OZrOJz258gryZwVhwEuOjRzsa
      Zhwau7uPer2O+59+CV+pAVmSYMQDGD11/FAADvFkgYoPUKLRoQp0iCcKblLhE2MEH+Qc10N8
      dTwxAnCoZz8aOJxbdz/g/wOrldbWtoh+WQAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Stacked Bar Chart (Medal Type and Count by Sport, with URL)' width='192'>
      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
      pkkAiJr2TySqUfTFWJWMAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Tree Map (Country Medal Count by Sport, with URL)' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
